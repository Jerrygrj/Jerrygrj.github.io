<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/6.html"/>
      <url>/posts/6.html</url>
      
        <content type="html"><![CDATA[<h2 id="GitHub的使用"><a href="#GitHub的使用" class="headerlink" title="GitHub的使用"></a>GitHub的使用</h2><h3 id="GitHub添加wiki"><a href="#GitHub添加wiki" class="headerlink" title="GitHub添加wiki"></a>GitHub添加wiki</h3><p>参考链接：</p><ul><li><a href="https://juejin.im/post/5a3216c8f265da43333e6b54">https://juejin.im/post/5a3216c8f265da43333e6b54</a></li></ul><h3 id="GitHub项目添加-license"><a href="#GitHub项目添加-license" class="headerlink" title="GitHub项目添加 license"></a>GitHub项目添加 license</h3><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/qq_35246620/article/details/77647234">https://blog.csdn.net/qq_35246620/article/details/77647234</a></li></ul><h3 id="GitHub-引用图片的另一种方式"><a href="#GitHub-引用图片的另一种方式" class="headerlink" title="GitHub 引用图片的另一种方式"></a>GitHub 引用图片的另一种方式</h3><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/cxint/p/7200164.html">关于markdown文件插入图片遇到的小问题和解决办法</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<h2 id="控制台的使用"><a href="#控制台的使用" class="headerlink" title="控制台的使用"></a>控制台的使用</h2><h3 id="控制台查看源码"><a href="#控制台查看源码" class="headerlink" title="控制台查看源码"></a>控制台查看源码</h3><p>控制台的<code>Sources</code>标签可以查看源码。按住快捷键「cmd + P」，可以根据文件名查找源码文件。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="show-user-agent-shadow-DOM"><a href="#show-user-agent-shadow-DOM" class="headerlink" title="show user agent shadow DOM"></a>show user agent shadow DOM</h3><p><img src="http://img.smyhvae.com/20180206_1610.png"></p><p><img src="http://img.smyhvae.com/20180206_1616.png"></p><p>把上图中的红框部分打钩。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/7.html"/>
      <url>/posts/7.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul><li><code>Emmet</code>：快速生成HTML片段，比如输入ul&gt;li*3可以快速生成：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://atom.io/packages/emmet">详细地址</a>，<a href="https://docs.emmet.io/cheat-sheet/">Emmet教程</a></p><ul><li><p><code>Snippets</code>：快速生成 js 代码片段（用来处理代码片段的模板输出），<a href="https://atom.io/packages/snippets">详细地址</a></p></li><li><p><code>Tree View</code>：文件浏览器，<a href="https://atom.io/packages/tree-view">详细地址</a></p></li><li><p><code>file icons</code>：文件识别图标，使用这个插件会让你的编辑器显示对应的图标，<a href="https://atom.io/packages/file-icons">详细地址</a></p></li><li><p><code>language-javascript-jsx</code>：jsx语法高亮 ，<a href="https://atom.io/packages/language-javascript-jsx">详细地址</a></p></li><li><p><code>language-vue</code>：vue语法高亮，<a href="https://atom.io/packages/language-vue">详细地址</a></p></li><li><p><code>linter-eslint</code>：eslint插件，<a href="https://atom.io/packages/linter-eslint">详细地址</a></p></li><li><p><code>vue-snippets</code>：vue代码片段，<a href="https://atom.io/packages/vue-snippets">详细地址</a></p></li><li><p><code>pigments</code>：颜色显示器，<a href="https://atom.io/packages/pigments">详细地址</a></p></li><li><p><code>linter-eslint</code>：语法检查</p></li><li><p><code>Atom-Beautify</code>：代码格式化</p></li></ul><p>参考链接：<a href="https://github.com/cucygh/JDFinance/blob/master/issue.md">https://github.com/cucygh/JDFinance/blob/master/issue.md</a></p><h2 id="插件无法安装的问题"><a href="#插件无法安装的问题" class="headerlink" title="插件无法安装的问题"></a>插件无法安装的问题</h2><h3 id="方法一：设置代理"><a href="#方法一：设置代理" class="headerlink" title="方法一：设置代理"></a>方法一：设置代理</h3><p><code>C:\Users\smyhvae\.atom\.apm</code>目录下的.apmrc配置文件（没有就新建一个）,然后添加代理信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strict-ssl=false</span><br><span class="line">https-proxy=http://127.0.0.1:1080/</span><br><span class="line">http-proxy =http://127.0.0.1:1080/</span><br></pre></td></tr></table></figure><p>这里的 <a href="http://127.0.0.1:1080，是我自己的">http://127.0.0.1:1080，是我自己的</a> Shadowsocks 代理，你需要设置成自己的可用代理。<br>然后再执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install --check</span><br></pre></td></tr></table></figure><p>应该可以测试成功，祝好运~~</p><p>参考链接：</p><ul><li><p><a href="https://atom-china.org/t/atom/984">https://atom-china.org/t/atom/984</a></p></li><li><p><a href="https://zhenyong.github.io/2016/08/03/starting-atom/">https://zhenyong.github.io/2016/08/03/starting-atom/</a></p></li></ul><h2 id="Markdown相关"><a href="#Markdown相关" class="headerlink" title="Markdown相关"></a>Markdown相关</h2><h3 id="在编辑器中预览"><a href="#在编辑器中预览" class="headerlink" title="在编辑器中预览"></a>在编辑器中预览</h3><p>2018-06-JD日记.md</p><p>Packages -&gt; Markdown Preview -&gt; Toggle Preview</p><p>快捷键：Shift + Ctrl + M</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="http://www.cnblogs.com/fanzhidongyzby/p/6637084.html">使用Atom打造无懈可击的Markdown编辑器</a></li></ul><h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="显示缩进线"><a href="#显示缩进线" class="headerlink" title="显示缩进线"></a>显示缩进线</h3><p>settings –&gt;Editor –&gt; Show Indent Guide</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>04-解决 Git 不区分大小写导致的文件冲突问题</title>
      <link href="/posts/51668.html"/>
      <url>/posts/51668.html</url>
      
        <content type="html"><![CDATA[<p><ArticleTopAd></ArticleTopAd></p><h2 id="解决-Git-不区分大小写导致的文件冲突问题"><a href="#解决-Git-不区分大小写导致的文件冲突问题" class="headerlink" title="解决 Git 不区分大小写导致的文件冲突问题"></a>解决 Git 不区分大小写导致的文件冲突问题</h2><ul><li><p>文章发布时间：2022-02-17</p></li><li><p>作者：@千古壹号</p></li></ul><p>有些同学在 Git 仓库对文件&#x2F;文件夹进行命名时，刚开始是小写，后来为了保持团队一致，又改成了大写，然而 Git 不会发现大小写的变化，此时就出了问题：导致仓库里出现了 大小写 同时存在的两个文件。但在 Windows、Mac 的电脑磁盘里，肉眼却能只看到一个文件，实在奇葩。</p><p>这个问题的根本原因是，Windows、Mac 的<strong>文件系统</strong>不区分大小写。</p><p>Linux的文件系统是区分大小写的。Git 默认是不区分大小写的，也可以通过改配置项，改为区分大小写。</p><h3 id="问题复现路径"><a href="#问题复现路径" class="headerlink" title="问题复现路径"></a>问题复现路径</h3><p>（1）新建一个 test 文件(大小写不敏感的状态下)，并提交。</p><p>（2）本地修改 test 变为 Test，文件内容无变更，无法提交。</p><p>（3）执行 <code>git config core.ignorecase false</code>，设 置Git的规则为 区分大小写（大小写敏感），然后 git push 提交，查看结果，此时远程仓库会存在 大小写 同时存在的文件，但本地仓库却只看到其中一个文件。</p><p>（4）甚至可能出现这种异常情况：本地暂存区的文件，怎么删也删不掉。再之后，从 test 尝试改为 Test 时，提示命名冲突。</p><h3 id="错误的解决办法"><a href="#错误的解决办法" class="headerlink" title="错误的解决办法"></a>错误的解决办法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> <span class="built_in">test</span> Test</span><br></pre></td></tr></table></figure><p>执行上面的命令时，会报错：<code>fatal: renaming &#39;Test&#39; failed: Invalid argument</code></p><h3 id="正确的解决办法"><a href="#正确的解决办法" class="headerlink" title="正确的解决办法"></a>正确的解决办法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的 test、Test 目录都删掉，并生成一个新的目录 Temp</span></span><br><span class="line">git <span class="built_in">mv</span> Test Temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Temp 目录改成 Test 目录。此时，项目中只会存在 Test 目录，不会存在 test 目录。目标达成。</span></span><br><span class="line">git <span class="built_in">mv</span> Temp Test</span><br></pre></td></tr></table></figure><p>执行完上面的两个命令之后，项目中只会存在 Test 目录，不会存在 test 目录。目标达成。</p><h3 id="关于-是否区分大小写-的补充说明"><a href="#关于-是否区分大小写-的补充说明" class="headerlink" title="关于 是否区分大小写 的补充说明"></a>关于 是否区分大小写 的补充说明</h3><p>我们知道：针对文件&#x2F;文件夹，Windows 系统和 Mac 系统是不区分大小写的；Linux 系统是区分大小写的；Git 默认是不区分大小写的，也可以通过改配置项，改为区分大小写。</p><p>不分区大小写，也有它的好处，比如：文件夹&#x2F;文件的路径，很多时候就代表了网站地址、页面url的路径。而<strong>网站地址也是不区分大小写的</strong>，这是很关键的原因之一。</p><p>总的来说，根本原因是文件系统、url在底层设计上不区分大小写。磁盘路径、页面地址，本质上都是 url 。</p><h3 id="关于-Git是否区分大小写-的补充"><a href="#关于-Git是否区分大小写-的补充" class="headerlink" title="关于 Git是否区分大小写 的补充"></a>关于 Git是否区分大小写 的补充</h3><p>前面讲到，Git 默认是不区分大小写的，可以通过命令<code>git config --get core.ignorecase</code>查到，默认值是 true。</p><p>我们也可以修改 Git 的这一配置项，改为区分大小写，配置命令为<code>git config core.ignorecase false</code>。</p><p>但我建议你<strong>保留 Git 的默认配置项</strong>，不要随意自行修改，避免产生其他的麻烦。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="https://shanyue.tech/bug/mac-git-ignorecase.html">Mac 中 git 大小写问题的解决方案</a></p></li><li><p><a href="https://blog.csdn.net/u013707249/article/details/79135639">git 大小写问题 踩坑笔记</a></p></li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>03-网络抓包和代理工具：Whistle</title>
      <link href="/posts/7379.html"/>
      <url>/posts/7379.html</url>
      
        <content type="html"><![CDATA[<p><ArticleTopAd></ArticleTopAd></p><h2 id="Whistle-官网"><a href="#Whistle-官网" class="headerlink" title="Whistle 官网"></a>Whistle 官网</h2><ul><li><p>Whistle 官网：<a href="https://wproxy.org/whistle/">https://wproxy.org/whistle/</a></p></li><li><p>Whistle 的 GitHub：<a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></p></li></ul><h2 id="Whistle-安装启动"><a href="#Whistle-安装启动" class="headerlink" title="Whistle 安装启动"></a>Whistle 安装启动</h2><h3 id="1、Whistle-安装"><a href="#1、Whistle-安装" class="headerlink" title="1、Whistle 安装"></a>1、Whistle 安装</h3><p>（1）通过 npm 安装 Whistle</p><h3 id="2、启动-whistle"><a href="#2、启动-whistle" class="headerlink" title="2、启动 whistle"></a>2、启动 whistle</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w2 start</span><br></pre></td></tr></table></figure><p>然后在浏览器输入<code>http://127.0.0.1:8899/</code> 即可打开代理配置的页面。</p><h3 id="3、配置代理"><a href="#3、配置代理" class="headerlink" title="3、配置代理"></a>3、配置代理</h3><p><strong>chrome浏览器配置代理</strong>：</p><p>可参考官方文档。</p><p><strong>Firefox浏览器配置代理</strong>：</p><p><img src="https://img.smyhvae.com/20200420_1357.png"></p><h3 id="4、安装证书并添加信任："><a href="#4、安装证书并添加信任：" class="headerlink" title="4、安装证书并添加信任："></a>4、安装证书并添加信任：</h3><p><img src="https://img.smyhvae.com/20200420_0922.png"></p><p>证书下载后，双击安装，安装目录选择“登录”这个tab。安装完成后，记得执行 <code>w2 restart</code>重启 whistle。</p><h3 id="手机设置代理"><a href="#手机设置代理" class="headerlink" title="手机设置代理"></a>手机设置代理</h3><p>连接好指定的wifi后，点击那个wifi里的设置，将「代理」那一项，设置为手动，然后输入ip（电脑上的ip）、端口号（8899）。然后就可以通过电脑上的whistle工具，查看手机的网页请求。</p><p>注意，要保证手机和电脑在同一个网络下。</p><p>另外，还需要在手机的浏览器，地址栏输入<code>rootca.pro</code>，给手机安装证书。</p><h2 id="捕获和拦截https请求"><a href="#捕获和拦截https请求" class="headerlink" title="捕获和拦截https请求"></a>捕获和拦截https请求</h2><p>whistle安装证书后，可以拦截 https 请求。但是，我现在又不想拦截https请求了，该怎么卸载证书呢？</p><p>我发现，证书无法卸载，正确的操作是：</p><p><img src="http://img.smyhvae.com/20180426_1621.png"></p><p>上图中，把红框部分，去掉勾选，就不捕获https了。谢谢azh童鞋。</p><p>参考链接：</p><ul><li><p><a href="https://www.zhihu.com/question/21474174">Android 手机如何设置http代理？</a></p></li><li><p><a href="http://zhuscat.com/2017/09/20/https-proxy-on-ios/">使用 Whistle 对 iOS HTTPS 进行抓包</a></p></li></ul><h2 id="移动端调试神器-eruda"><a href="#移动端调试神器-eruda" class="headerlink" title="移动端调试神器:eruda"></a>移动端调试神器:eruda</h2><blockquote><p>手机连接代理时，如何看console.log的日志信息?</p></blockquote><blockquote><p>现在，代码里有console.log，如果是在电脑浏览器上看，可以直接在控制台查看console.log的内容。但是，如果手机连接代理，在手机上打开网页的话，要怎么查看console.log的内容呢？具体做法如下：</p></blockquote><p>（1）在 whistle中，新建一个名叫<code>Eruda H5</code>的代理，代理中的内容是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com htmlAppend://&#123;eruda.html&#125;</span><br></pre></td></tr></table></figure><p>(2)新建一个values，里面的内容是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/eruda/1.4.3/eruda.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    eruda.init()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就OK了。</p><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>02-Git的使用</title>
      <link href="/posts/53547.html"/>
      <url>/posts/53547.html</url>
      
        <content type="html"><![CDATA[<p><ArticleTopAd></ArticleTopAd></p><h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><h3 id="全局配置用户信息"><a href="#全局配置用户信息" class="headerlink" title="全局配置用户信息"></a>全局配置用户信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;smyhvae&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;smyhvae@163.com&quot;</span><br></pre></td></tr></table></figure><h2 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h2><h3 id="场景：基于master分支的代码，开发一个新的特性"><a href="#场景：基于master分支的代码，开发一个新的特性" class="headerlink" title="场景：基于master分支的代码，开发一个新的特性"></a>场景：基于master分支的代码，开发一个新的特性</h3><p>如果你直接在master分支上开发这个新特性，是不好的，万一你在开发<code>特性1</code>的时候，领导突然又要叫你去开发<code>特性2</code>，就不好处理了。难道开发的两个特性都提交到master？一会儿提交特性1的commit，一会儿提交特性2的commit？这会导致commit记录很混乱。</p><p>所以，我给你的建议做法是：给每个特性都单独建一个的新的分支。</p><p>比如说，我专门给<code>特性1</code>建一个分支<code>feature_item_recommend</code>。具体做法如下：</p><p>（1）基于master分支，创建一个新的分支，起名为<code>feature_item_recommend</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature_item_recommend</span><br><span class="line"></span><br><span class="line">Switched to a new branch &#x27;feature_item_recommend&#x27;</span><br></pre></td></tr></table></figure><p>上面这行命令，相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch feature_item_recommend    // 创建新的分支</span><br><span class="line"></span><br><span class="line">$ git checkout feature_item_recommend  //切换到新的分支</span><br></pre></td></tr></table></figure><p>（2）在新的分支<code>feature_item_recommend</code>上，完成开发工作，并 commit 、push。</p><p>（3）将分支<code>feature_item_recommend</code>上的开发进度<strong>合并</strong>到master分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master  //切换到master分支</span><br><span class="line"></span><br><span class="line">$ git merge feature_item_recommend    //将分支 feature_item_recommend 的开发进度合并到 master 分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>合并之后，<code>master</code>分支和<code>feature_item_recommend</code>分支会指向同一个位置。</p><p>（3）删除分支<code>feature_item_recommend</code>：</p><blockquote><p>既然 特性1 开发完了，也放心地提交到master了，那我们就可以将这个分支删除了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_item_recommend</span><br></pre></td></tr></table></figure><p>注意，我们当前是处于<code>master</code>分支的位置，来删除<code>feature_item_recommend</code>分支。如果当前是处于<code>feature_item_recommend</code>分支，是没办法删除它自己的。</p><p>同理，当我转身去开发<code>特性2</code>的时候，也是采用同样的步骤。</p><h3 id="合并分支时，如果存在分叉"><a href="#合并分支时，如果存在分叉" class="headerlink" title="合并分支时，如果存在分叉"></a>合并分支时，如果存在分叉</h3><p><img src="http://img.smyhvae.com/20180610_1650.png"></p><p>比如说上面这张图中，最早的时候，master分支是位于<code>C2</code>节点。我基于<code>C2</code>节点，new出一个新的分支<code>iss53</code>，我在<code>iss53</code>上提交了好几个commit。</p><p>现在，我准备把<code>iss53</code>上的几个commit合并到master上，此时发现，master分支已经前进到C4了。那该怎么合并呢？</p><p>合并的命令仍然是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line">$ git merge iss53</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><p>这次合并的实现，并不同于简单的并入方式。这一次，我的开发历史是从更早的地方开始分叉的。</p><p>由于当前 master 分支所指向的commit (C4)并非想要并入分支（iss53）的直接祖先，Git 不得不进行一些处理。就此例而言，Git 会用两个分支的末端（C4 和C5）和它们的共同祖先（C2）进行一次简单的三方合并计算。</p><p>Git 没有简单地把分支指针右移，而是对三方合并的结果作一新的快照，并自动创建一个指向它的commit（C6）（如下图所示）。我们把这个特殊的commit 称作合并提交（mergecommit），因为它的祖先不止一个。</p><p>值得一提的是Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和CVS 或Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让Git 的合并操作比其他系统都要简单不少。</p><p><img src="http://img.smyhvae.com/20180610_1710.png"></p><h3 id="解决合并时发生的冲突"><a href="#解决合并时发生的冲突" class="headerlink" title="解决合并时发生的冲突"></a>解决合并时发生的冲突</h3><p><img src="http://img.smyhvae.com/20180610_1740.png"></p><p>如果 feature1和feature2修改的是同一个文件中<strong>代码的同一个位置</strong>，那么，把feature1合并到feature2时，就会产生冲突。这个冲突需要人工解决。步骤如下：</p><p>（1）手动修改文件：手动修改冲突的那个文件，决定到底要用哪个分支的代码。</p><p>（2）git add：解决好冲突后，输入<code>git status</code>，会提示<code>Unmerged paths</code>。这个时候，输入<code>git add</code>即可，表示：<strong>修改冲突成功，加入暂存区</strong>。</p><p>（3）git commit 提交。</p><p>然后，我们可以继续把 feature1 分支合并到 master分支，最后删除feature1、feature2。</p><p><strong>注意</strong>：两个分支的同一个文件的不同地方合并时，git会自动合并，不会产生冲突。</p><p>比如分支feture1对index.html原来的第二行之前加入了一段代码。<br>分支feature2对index.html在原来的最后一行的后面加入了一段代码。<br>这个时候在对两个分支合并，git不会产生冲突，因为两个分支是修改同一文件的不同位置。<br>git自动合并成功。不管是git自动合并成功，还是在人工解决冲突下合并成功，提交之前，都要对代码进行测试。</p><h2 id="日常操作积累"><a href="#日常操作积累" class="headerlink" title="日常操作积累"></a>日常操作积累</h2><h3 id="修改密码（曲线救国）"><a href="#修改密码（曲线救国）" class="headerlink" title="修改密码（曲线救国）"></a>修改密码（曲线救国）</h3><blockquote><p>网上查了很久，没找到答案。最终，在cld童鞋的提示下，采取如下方式进行曲线救国。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置当前仓库的用户名为空</span></span><br><span class="line">git config  user.name <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>然后，当我们再输入<code>git pull</code>等命令行时，就会被要求重新输入<em>新的</em>账号密码。此时，密码就可以修改成功了。最后，我们还要输入如下命令，还原当前仓库的用户名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;smyhvae&quot;</span><br></pre></td></tr></table></figure><h3 id="修改已经push的某次commit的作者信息"><a href="#修改已经push的某次commit的作者信息" class="headerlink" title="修改已经push的某次commit的作者信息"></a>修改已经push的某次commit的作者信息</h3><p>已经push的记录，如果要修改作者信息的话，只能 通过–force命令。我反正是查了很久，但最终还是不敢用公司的仓库尝试。</p><p>参考链接：</p><ul><li><a href="https://segmentfault.com/q/1010000006999861">git 修改已提交的某一次的邮箱和用户信息</a></li></ul><p>看最后一条答案。</p><ul><li><a href="http://baurine.github.io/2015/08/22/git_update_author.html">修改 git repo 历史提交的 author</a></li></ul><h3 id="将-branch1的某个commit1合并到branch2当中"><a href="#将-branch1的某个commit1合并到branch2当中" class="headerlink" title="将 branch1的某个commit1合并到branch2当中"></a>将 <code>branch1</code>的某个<code>commit1</code>合并到<code>branch2</code>当中</h3><p>切换到branch2中，然后执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit1</span><br></pre></td></tr></table></figure><h3 id="20190118-修改GitHub已提交的用户名和邮箱"><a href="#20190118-修改GitHub已提交的用户名和邮箱" class="headerlink" title="20190118-修改GitHub已提交的用户名和邮箱"></a>20190118-修改GitHub已提交的用户名和邮箱</h3><p>参考链接：（亲测有效）</p><ul><li><p><a href="https://cloud.tencent.com/developer/article/1352623">修改Git全部Commit提交记录的用户名Name和邮箱Email</a></p></li><li><p><a href="https://blog.csdn.net/yusufolu9/article/details/53706269">Mac 运行sh文件，也就是传说中的shell脚本</a></p></li></ul><p>在执行<code>./email.sh</code>后，如果出现<code>permission denied</code>的错误，可以先执行<code>chmod 777 email.sh</code>，修改文件的权限。</p><h3 id="20200520-将Git-项目迁移到另一个仓库"><a href="#20200520-将Git-项目迁移到另一个仓库" class="headerlink" title="20200520-将Git 项目迁移到另一个仓库"></a>20200520-将Git 项目迁移到另一个仓库</h3><p>我们假设旧仓库的项目名称叫<code>old-repository</code>，新仓库的项目名称叫<code>new-repository</code>。操作如下：</p><p>（1）创建旧仓库的裸克隆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare https://github.com/exampleuser/old-repository.git</span><br></pre></td></tr></table></figure><p>执行上述命令后，会在本地生成一个名叫 <code>old-repository.git</code>的文件夹。</p><p>（2）迁移到新仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> old-repository.git</span><br><span class="line"></span><br><span class="line">git push --mirror https://github.com/exampleuser/new-repository.git</span><br></pre></td></tr></table></figure><p>这样的话，项目就已经迁移到新仓库了。</p><p>注意，我们<strong>不需要</strong>手动新建一个空的新仓库，当我们执行上述命令之后，新仓库就已经自动创建好了。</p><p>参考链接：</p><ul><li><p><a href="https://help.github.com/cn/github/creating-cloning-and-archiving-repositories/duplicating-a-repository">复制仓库</a></p></li><li><p><a href="https://moelove.info/2016/12/04/Git-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%92%8C%E8%A3%B8%E4%BB%93%E5%BA%93/">Git 本地仓库和裸仓库</a></p></li></ul><h3 id="2021-11-10-提交代码时，绕过-eslint-检查"><a href="#2021-11-10-提交代码时，绕过-eslint-检查" class="headerlink" title="2021-11-10-提交代码时，绕过 eslint 检查"></a>2021-11-10-提交代码时，绕过 eslint 检查</h3><p>需求：提交代码时，绕过 eslint 检查</p><p>解决办法：用命令行提交，末尾追加<code>--no-verify</code>。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交代码</span></span><br><span class="line">git commit -m <span class="string">&#x27;千古壹号的commit备注&#x27;</span> --no-verify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程时，也可以追加 --no-verify，以免远程仓库做了 eslint 限制。</span></span><br><span class="line">git push origin --no-verify</span><br></pre></td></tr></table></figure><h3 id="2021-12-29-切换仓库的源地址"><a href="#2021-12-29-切换仓库的源地址" class="headerlink" title="2021-12-29-切换仓库的源地址"></a>2021-12-29-切换仓库的源地址</h3><p>查看源地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>切换源地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://xxx.git</span><br></pre></td></tr></table></figure><h2 id="git客户端推荐"><a href="#git客户端推荐" class="headerlink" title="git客户端推荐"></a>git客户端推荐</h2><p>市面上的Git客户端我基本都用过了，我最推荐的一款Git客户端是：<a href="https://www.git-tower.com/">Tower</a> 或者 <a href="https://git-fork.com/">Fork</a>。</p><ul><li>GitUp：<a href="https://gitup.co/">https://gitup.co/</a></li></ul><p>20180623时，网上看了下Git客户端的推荐排名：</p><p><img src="http://img.smyhvae.com/20180623_1210.png"></p><p><strong>SmartGit</strong>：</p><p>商业用途收费， 个人用户免费：</p><p><img src="http://img.smyhvae.com/20180623_1305.png"></p><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><ul><li>《pro.git中文版》</li></ul><h2 id="推荐连接"><a href="#推荐连接" class="headerlink" title="推荐连接"></a>推荐连接</h2><h3 id="2018-06"><a href="#2018-06" class="headerlink" title="2018-06"></a>2018-06</h3><ul><li><a href="https://www.cnblogs.com/wangiqngpei557/p/6056624.html">聊下git pull –rebase</a></li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>01-VS Code的使用</title>
      <link href="/posts/26789.html"/>
      <url>/posts/26789.html</url>
      
        <content type="html"><![CDATA[<p><ArticleTopAd></ArticleTopAd></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文章标题：《第一次使用 VS Code 时你应该知道的一切配置》。本文的最新内容，更新于 2021-10-09。大家完全不用担心这篇文章会过时，因为随着 VS Code 的版本更新和插件更新，本文也会随之更新。</p></blockquote><blockquote><p>本文的最新内容，也会在<a href="https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md">GitHub</a>上同步更新，欢迎 star。</p></blockquote><p>VS Code 软件实在是太酷、太好用了，越来越多的新生代互联网民工正在使用它。</p><p>前端男神<strong>尤雨溪</strong>大大这样评价 VS Code：</p><p><img src="http://img.smyhvae.com/20200619_0133.png"></p><p>有一点你可能会感到惊讶：VS Code 这款软件本身，是用 JavaScript 语言编写的（具体请自行查阅基于 JS 的 PC 客户端开发框架 <code>Electron</code>）。Jeff Atwood 在 2007 年提出了著名的 Atwood 定律：</p><blockquote><p><strong>任何能够用 JavaScript 实现的应用系统，最终都必将用 JavaScript 实现</strong>。</p></blockquote><p>Jeff Atwood 这个人是谁不重要（他是 Stack Overflow 网站的联合创始人），重要的是这条定律。</p><p>前端目前是处在春秋战国时代，各路英雄豪杰成为后浪，各种框架工具层出不穷，VS Code 软件无疑是大前端时代最骄傲的工具。</p><p>如果你是做前端开发（JavaScript 编程语言为主），则完全可以将 VS Code 作为「<strong>主力开发工具</strong>」。这款软件是为前端同学量身定制的，开箱即用。</p><p>如果你是做其他语言方向的开发，并且不需要太复杂的集成开发环境，那么，你可以把 VS Code 作为「<strong>代码编辑器</strong>」来使用，纵享丝滑。</p><p>甚至是一些写文档、写作的同学，也经常把 VS Code 作为 markdown <strong>写作工具</strong>，毫无违和感。</p><p>退而求其次，即便你不属于以上任何范畴，你还可以把 VS Code 当作最简单的<strong>文本编辑器</strong>来使用，完胜 Windows 系统自带的记事本。</p><p>写下这篇文章，是顺势而为。</p><h2 id="一、惊艳登场：VS-Code-的介绍"><a href="#一、惊艳登场：VS-Code-的介绍" class="headerlink" title="一、惊艳登场：VS Code 的介绍"></a>一、惊艳登场：VS Code 的介绍</h2><p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做得很不错。</p><p>微软有两种软件：一种是 VS Code，一种是其他软件。</p><p>在2015年4月29日的微软Build开发者大会上，微软宣布推出 VS Code之后，这个轻量级的编辑器成为全球无数开发者们最喜爱的开发工具。VS Code基于开源且跨平台的理念，每月都会进行迭代，并提供每天发布的 insider 版本（insider是微软的一种公测计划，类似于国内软件所说的内测版）。它拥有至少几万个插件，生态极为活跃和丰富。</p><h3 id="IDE-与-编辑器的对比"><a href="#IDE-与-编辑器的对比" class="headerlink" title="IDE 与 编辑器的对比"></a>IDE 与 编辑器的对比</h3><p>IDE 和编辑器是有区别的：</p><ul><li><p><strong>IDE</strong>（Integrated Development Environment，集成开发环境）：对代码有较好的智能提示和相互跳转，同时侧重于工程项目，对项目的开发、调试工作有较好的图像化界面的支持，因此比较笨重。比如 Eclipse 的定位就是 IDE。</p></li><li><p><strong>编辑器</strong>：要相对轻量许多，侧重于文本的编辑。比如 Sublime Text 的定位就是编辑器。再比如 Windows 系统自带的「记事本」就是最简单的编辑器。</p></li></ul><p>需要注意的是，VS Code 的定位是<strong>编辑器</strong>，而非 IDE ，但 VS Code 又比一般的编辑器的功能要丰富许多。可以这样理解：VS Code 的体量是介于编辑器和 IDE 之间。VS Code 的使命，是让开发者在编辑器里拥有 IDE 那样的开发体验。</p><p> VS Code流行起来之后，使用 Sublime Text、Atom 这类编辑器软件的人，自然就越来越少了。</p><h3 id="VS-Code-的特点"><a href="#VS-Code-的特点" class="headerlink" title="VS Code 的特点"></a>VS Code 的特点</h3><ul><li>跨平台：支持 MacOS、Windows 和 Linux 等多个平台。在这多种平台下，拥有一致的用户界面和开发体验。</li><li>开源：VS Code 的源代码以 MIT 协议开源。不仅代码开源，而且整个产品的开发计划和发布管理也都是开源的。VS Code团队每年都会在 GitHub 的Wiki上发布 <a href="https://github.com/microsoft/vscode/wiki/Roadmap">Roadmap</a>，列出一整年的规划图。VS Code 软件的官方文档也托管在了 <a href="https://github.com/Microsoft/vscode-docs">GitHub</a> 上。</li><li>自带终端、图形化的调试工具、Git 版本控制。</li><li>插件扩展：支持第三方插件，功能强大。既有中心化的插件市场，也可以直接在 VS Code里搜索你想要的插件。</li><li>生态：社区生态活跃且丰富，社区氛围浓厚。</li><li>自带  emmet：支持代码自动补全，快速生成简单的语法结构。要知道，这个功能在 Sublime Text中，得先安装插件才行。</li><li>语法支持：VS Code 自带了 JavaScript、TypeScript 和 Node.js 的<strong>语法支持</strong>，包括：<strong>语法高亮、代码智能提示和补全、括号匹配、颜色区分、代码片段提示</strong>等。也就是说，你在书写 JS 和 TS 时，这些语法支持都是自带的。其他的一些语言，你需要先安装相应的<strong>扩展包</strong>插件，就出现语法支持。</li><li>在修改配置方面，既有图形化的配置界面，也有 基于 JSON 文件的配置方式，满足不同人群的使用习惯。</li></ul><h3 id="前端利器之争：-VS-Code-与-WebStorm"><a href="#前端利器之争：-VS-Code-与-WebStorm" class="headerlink" title="前端利器之争： VS Code 与 WebStorm"></a>前端利器之争： VS Code 与 WebStorm</h3><p>前端小白最喜欢问的一个问题是：哪个编辑器&#x2F;IDE 好用？是 VS Code 还是 WebStorm （WebStorm 其实是 IntelliJ IDEA 的定制版）？我来做个对比：</p><ul><li><p><strong>哪个更酷</strong>：显然 VS Code 更酷。</p></li><li><p><strong>内存占用情况</strong>：根据我的观察，VS Code 是很占内存的（尤其是当你打开多个窗口的时候），但如果你的内存条够用，使用起来是不会有任何卡顿的感觉的。相比之下，IntelliJ IDEA 不仅非常占内存，而且还非常卡顿。如果你想换个既轻量级、又不占内存的编辑器，最好还是使用「Sublime Text」编辑器。</p></li><li><p><strong>使用比例</strong>：当然是 VS Code 更胜一筹。先不说别的，我就拿数据说话，我目前所在的研发团队有 200 人左右（120个后台、80个前端），他们绝大部分人都在用 VS Code 编码，妥妥的。</p></li></ul><p>所以，如果你以后还问这个问题，那就真有些掉底了。</p><h3 id="VS-Code-的技术栈、核心组件"><a href="#VS-Code-的技术栈、核心组件" class="headerlink" title="VS Code 的技术栈、核心组件"></a>VS Code 的技术栈、核心组件</h3><p>了解 VS Code的技术栈和核心组件，可以让我们对 VS Code 有更深入的认识。此小段，了解即可。</p><ul><li>开发框架：Electron。Electron可以使用 Node.js + JS这样的技术栈开发桌面GUI应用程序。</li><li>编辑器：Monaco Editor。Monaco Editor 是一款开源的在线代码编辑器，是 <strong>VS Code 浏览器版本</strong>的最核心组件。<a href="https://zhuanlan.zhihu.com/p/88828576">#</a></li><li>编程语言：TypeScript。TypeScript 是  JavaScript的严格超集。TS 在JS的基础上添加了许多功能，引入了声明文件，而且支持类型扩展。TS 适合长期的、多人开发的大型项目开发。</li><li>让编辑器支持语言功能：Language Server Protocol （LSP） 语言服务协议。LSP是编辑器&#x2F;IDE 与语言服务器之间的一种协议，通过 JSON-PRC 传输消息，可以让编辑器嵌入并支持各种编程语言。开发者可以在编辑器中使用各种语言来编写程序。</li><li>让编辑器支持调试功能：Debug Adapter Protocol（DAP）。DAP 是基于 JSON的协议，它抽象了开发工具与调试工具质检的通信。</li><li>集成终端：Xterm.js。VS Code的集成终端是基于开源项目 <a href="https://github.com/xtermjs/xterm.js/">Xterm.js</a> 进行开发的。Xterm.js 是一个使用 TS 开发的终端组件。另外，Xterm.js 并不是直接下来下来就能用的终端应用，它只是一个前端组件，可以与 bash这样的进程进行连接，然后让用户通过  Xterm.js 进行交互。</li></ul><h3 id="VS-Code-的安装"><a href="#VS-Code-的安装" class="headerlink" title="VS Code 的安装"></a>VS Code 的安装</h3><ul><li>VS Code 官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></li></ul><p>VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。</p><p><img src="http://img.smyhvae.com/20190313_1750_3.png"></p><p>上图中，直接点击 download，一键下载安装即可。</p><p>VS Code支持以下平台：</p><p><img src="https://img.smyhvae.com/20210930_1930.png"></p><p>安装完成后的界面如下：</p><p><img src="https://img.smyhvae.com/20211011_1703.png"></p><p>VS  Code被分为以下五个区域：</p><ul><li>编辑器</li><li>侧边栏</li><li>状态栏</li><li>活动栏</li><li>面板</li></ul><p>VS Code在功能上非常克制，只包含了大多数开发流程中所需要的基础模块，包括：编辑器、文件管理、窗口管理、首选项设置、终端等。</p><p>你需要根据具体需要安装额外的组件或者插件。比如说，如果开发TS项目，则需要安装 TS编译器、ESLint、TSLint等编译工具。如果开发C语言项目，则需要安装gcc、Clang等编辑工具。</p><h2 id="二、崭露锋芒：VS-Code-快捷键"><a href="#二、崭露锋芒：VS-Code-快捷键" class="headerlink" title="二、崭露锋芒：VS Code 快捷键"></a>二、崭露锋芒：VS Code 快捷键</h2><p>VS Code 用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。</p><p>任何工具，掌握 20%的技能，足矣应对 80% 的工作。既然如此，你可能会问：那就只保留 20% 的特性，不久可以满足 80%的用户了吗？</p><p>但我想说的是：**那从来都不是同样的 20%**，每个人都会用到不同的功能。</p><p>掌握下面这些高频核心快捷键，你和你的工具，足矣露出锋芒。</p><h3 id="1、工作区快捷键"><a href="#1、工作区快捷键" class="headerlink" title="1、工作区快捷键"></a>1、工作区快捷键</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + P</strong></td><td align="left"><strong>Ctrl + Shift + P</strong>，F1</td><td align="left">显示命令面板</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + B</strong></td><td align="left"><strong>Ctrl + B</strong></td><td align="left">显示&#x2F;隐藏侧边栏</td><td align="left">很实用</td></tr><tr><td align="left"><code>Cmd + \</code></td><td align="left"><code>Ctrl + \</code></td><td align="left"><strong>拆分为多个编辑器</strong></td><td align="left">【重要】抄代码利器</td></tr><tr><td align="left"><strong>Cmd + 1、2</strong></td><td align="left"><strong>Ctrl + 1、2</strong></td><td align="left">聚焦到第 1、第 2 个编辑器</td><td align="left">同上重要</td></tr><tr><td align="left"><strong>Cmd + +、Cmd + -</strong></td><td align="left"><strong>ctrl + +、ctrl + -</strong></td><td align="left">将工作区放大&#x2F;缩小（包括代码字体、左侧导航栏）</td><td align="left">在投影仪场景经常用到</td></tr><tr><td align="left">Cmd + J</td><td align="left">Ctrl + J</td><td align="left">显示&#x2F;隐藏控制台</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Shift + N</strong></td><td align="left"><strong>Ctrl + Shift + N</strong></td><td align="left">重新开一个软件的窗口</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + Shift + W</td><td align="left">Ctrl + Shift + W</td><td align="left">关闭软件的当前窗口</td><td align="left"></td></tr><tr><td align="left">Cmd + N</td><td align="left">Ctrl + N</td><td align="left">新建文件</td><td align="left"></td></tr><tr><td align="left">Cmd + W</td><td align="left">Ctrl + W</td><td align="left">关闭当前文件</td><td align="left"></td></tr></tbody></table><h3 id="2、跳转操作"><a href="#2、跳转操作" class="headerlink" title="2、跳转操作"></a>2、跳转操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + &#96;</td><td align="left">没有</td><td align="left">在同一个软件的<strong>多个工作区</strong>之间切换</td><td align="left">使用很频繁</td></tr><tr><td align="left"><strong>Cmd + Option + 左右方向键</strong></td><td align="left">Ctrl + Pagedown&#x2F;Pageup</td><td align="left">在已经打开的<strong>多个文件</strong>之间进行切换</td><td align="left">非常实用</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">Ctrl + Tab</td><td align="left">在已经打开的多个文件之间进行跳转</td><td align="left">不如上面的快捷键快</td></tr><tr><td align="left">Cmd + Shift + O</td><td align="left">Ctrl + shift + O</td><td align="left">在当前文件的各种<strong>方法之间</strong>（符号：Symbol）进行跳转</td><td align="left"></td></tr><tr><td align="left">Cmd + T</td><td align="left">Ctrl + T</td><td align="left">在当前<strong>工作区</strong>的各种方法之间（符号：Symbol）进行跳转</td><td align="left"></td></tr><tr><td align="left">Ctrl + G</td><td align="left">Ctrl + G</td><td align="left">跳转到指定行</td><td align="left"></td></tr><tr><td align="left"><code>Cmd+Shift+\</code></td><td align="left"><code>Ctrl+Shift+\</code></td><td align="left">跳转到匹配的括号</td><td align="left"></td></tr></tbody></table><h3 id="3、移动光标"><a href="#3、移动光标" class="headerlink" title="3、移动光标"></a>3、移动光标</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">方向键</td><td align="left">方向键</td><td align="left">在<strong>单个字符</strong>之间移动光标</td><td align="left">大家都知道</td></tr><tr><td align="left"><strong>option + 左右方向键</strong></td><td align="left"><strong>Ctrl + 左右方向键</strong></td><td align="left">在<strong>单词</strong>之间移动光标</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + 左右方向键</strong></td><td align="left"><strong>Fn + 左右方向键</strong>（或 Win + 左右方向键）</td><td align="left">将光标定位到当前行的最左侧、最右侧（在<strong>整行</strong>之间移动光标）</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Alt + 左右方向键</strong></td><td align="left"><strong>Alt + Shift + 左右方向键</strong></td><td align="left">左右扩大&#x2F;缩小选中的范围</td><td align="left">很酷，极为高效</td></tr><tr><td align="left">Cmd + ↑</td><td align="left">Ctrl + Home</td><td align="left">将光标定位到文件的第一行</td><td align="left"></td></tr><tr><td align="left">Cmd + ↓</td><td align="left">Ctrl + End</td><td align="left">将光标定位到文件的最后一行</td><td align="left"></td></tr><tr><td align="left">Cmd + Shift + \</td><td align="left"></td><td align="left">在<strong>代码块</strong>之间移动光标</td><td align="left"></td></tr></tbody></table><h3 id="4、编辑操作"><a href="#4、编辑操作" class="headerlink" title="4、编辑操作"></a>4、编辑操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + C</td><td align="left">Ctrl + C</td><td align="left">复制</td><td align="left"></td></tr><tr><td align="left">Cmd + X</td><td align="left">Ctrl + X</td><td align="left">剪切</td><td align="left"></td></tr><tr><td align="left">Cmd + V</td><td align="left">Ctrl + V</td><td align="left">粘贴</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Enter</strong></td><td align="left"><strong>Ctrl + Enter</strong></td><td align="left">在当前行的下方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向下插入一行</td></tr><tr><td align="left">Cmd+Shift+Enter</td><td align="left">Ctrl+Shift+Enter</td><td align="left">在当前行的上方新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向上插入一行</td></tr><tr><td align="left"><strong>Option + ↑</strong></td><td align="left"><strong>Alt + ↑</strong></td><td align="left">将代码向上移动</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + ↓</strong></td><td align="left"><strong>Alt + ↓</strong></td><td align="left">将代码向下移动</td><td align="left">很常用</td></tr><tr><td align="left">Option + Shift + ↑</td><td align="left">Alt + Shift + ↑</td><td align="left">将代码向上复制一行</td><td align="left"></td></tr><tr><td align="left"><strong>Option + Shift + ↓</strong></td><td align="left"><strong>Alt + Shift + ↓</strong></td><td align="left">将代码向下复制一行</td><td align="left">写重复代码的利器</td></tr></tbody></table><p>另外再补充一点：将光标点击到某一行的任意位置时，默认就已经是<strong>选中全行</strong>了，此时可以直接<strong>复制</strong>或<strong>剪切</strong>，无需点击鼠标。这个非常实用，是所有的编辑操作中，使用得最频繁的。它可以有以下使用场景：</p><ul><li>场景1：假设光标现在处于第5行的<strong>任意位置</strong>，那么，直接依次按下 <code>Cmd + C</code> 和 <code>Cmd + V</code>，就会把这行代码复制到第6行。继续按 <code>Cmd + C</code> 和 <code>Cmd + V</code>，就会把这行代码复制到第7行。copy代码so easy。</li><li>场景2：假设光标现在处于第5行，那么，先按下 <code>Cmd + C</code>，然后按两下<code>↑</code> 方向键，此时光标处于第3行；紧接着，继续按下<code>Cmd + V</code>，就会把刚刚那行代码复制到第3行，原本处于第3行的代码会整体<strong>下移</strong>。</li></ul><p>你看到了没？上面的两个场景，我全程没有使用鼠标，只通过简单的复制粘贴和方向键，就做到了如此迅速的copy代码。你说是不是很高效？</p><h3 id="5、删除操作"><a href="#5、删除操作" class="headerlink" title="5、删除操作"></a>5、删除操作</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + shift + K</td><td align="left">Ctrl + Shift + K</td><td align="left">删除整行</td><td align="left">「Cmd + X」的作用是剪切，但也可以删除整行</td></tr><tr><td align="left"><strong>option + Backspace</strong></td><td align="left"><strong>Ctrl + Backspace</strong></td><td align="left">删除光标之前的一个单词</td><td align="left">英文有效，很常用</td></tr><tr><td align="left">option + delete</td><td align="left">Ctrl + delete</td><td align="left">删除光标之后的一个单词</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + Backspace</strong></td><td align="left"></td><td align="left">删除光标之前的整行内容</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + delete</td><td align="left"></td><td align="left">删除光标之后的整行内容</td><td align="left"></td></tr></tbody></table><p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p><h3 id="6、多光标选择-x2F-多光标编辑"><a href="#6、多光标选择-x2F-多光标编辑" class="headerlink" title="6、多光标选择&#x2F;多光标编辑"></a>6、多光标选择&#x2F;多光标编辑</h3><p>多光标选择在编程的<strong>提效</strong>方面可谓立下了汗马功劳。因为比较难记住，所以你要时不时回来复习这一段。</p><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Option + 鼠标连续点击任意位置</strong></td><td><strong>Alt + 鼠标连续点击任意位置</strong></td><td>在任意位置，同时出现多个光标</td><td>很容易记住</td></tr><tr><td>Cmd + D</td><td>Ctrl + D</td><td>将光标放在某个单词的位置（或者先选中某个单词），然后反复按下「 <strong>Cmd + D</strong> 」键， 即可将下一个相同的词逐一加入选择。</td><td>较常用</td></tr><tr><td><strong>Cmd + Shift + L</strong></td><td><strong>Ctrl + Shift + L</strong></td><td>将光标放在某个单词的位置（或者先选中某个单词），然后按下快捷键，则所有的相同内容处，都会出现光标。</td><td>很常用。比如变量重命名的时候，就经常用到</td></tr></tbody></table><h3 id="7、多列选择-x2F-多列编辑"><a href="#7、多列选择-x2F-多列编辑" class="headerlink" title="7、多列选择&#x2F;多列编辑"></a>7、多列选择&#x2F;多列编辑</h3><p>多列选择是更高效的多光标选择，所以单独列成一小段。</p><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + Option + 上下键</td><td>Ctrl + Alt + 上下键</td><td>在连续的多列上，同时出现多个光标</td><td>较常用</td></tr><tr><td>Option + Shift + 鼠标拖动</td><td>Alt + Shift + 鼠标拖动</td><td>按住快捷键，然后把鼠标从区域的左上角拖至右下角，即可在选中区域的每一行末尾，出现光标。</td><td>很神奇的操作，较常用</td></tr><tr><td><strong>Option + Shift + i</strong></td><td><strong>Alt + Shift + I</strong></td><td>选中一堆文本后，按下快捷键，既可在<strong>每一行的末尾</strong>都出现一个光标。</td><td>很常用</td></tr></tbody></table><h3 id="8、编程语言相关"><a href="#8、编程语言相关" class="headerlink" title="8、编程语言相关"></a>8、编程语言相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + &#x2F;</td><td align="left">Ctrl + &#x2F;</td><td align="left">添加单行注释</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + F</strong></td><td align="left">Alt + shift + F</td><td align="left">代码格式化</td><td align="left">很常用</td></tr><tr><td align="left">F2</td><td align="left">F2</td><td align="left">以重构的方式进行<strong>重命名</strong></td><td align="left">改代码备</td></tr><tr><td align="left">Ctrl + J</td><td align="left"></td><td align="left">将多行代码合并为一行</td><td align="left">Win 用户可在命令面板搜索”合并行“</td></tr><tr><td align="left">Cmd +</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Cmd + U</td><td align="left">Ctrl + U</td><td align="left">将光标的移动回退到上一个位置</td><td align="left">撤销光标的移动和选择</td></tr></tbody></table><h3 id="9、搜索相关"><a href="#9、搜索相关" class="headerlink" title="9、搜索相关"></a>9、搜索相关</h3><table><thead><tr><th align="left">Mac 快捷键</th><th align="left">Win 快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Shift + F</strong></td><td align="left"><strong>Ctrl + Shift +F</strong></td><td align="left">全局搜索代码</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + P</strong></td><td align="left"><strong>Ctrl + P</strong></td><td align="left">在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td align="left"></td></tr><tr><td align="left">Cmd + F</td><td align="left">Ctrl + F</td><td align="left">在当前文件中搜索代码，光标在搜索框里</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + G</strong></td><td align="left"><strong>F3</strong></td><td align="left">在当前文件中搜索代码，光标仍停留在编辑器里</td><td align="left">很巧妙</td></tr></tbody></table><h3 id="10、自定义快捷键"><a href="#10、自定义快捷键" class="headerlink" title="10、自定义快捷键"></a>10、自定义快捷键</h3><p>按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。</p><p>当然，你也可以选择菜单栏「偏好设置 –&gt; 键盘快捷方式」，进入快捷键的设置：</p><p><img src="http://img.smyhvae.com/20190329_2120.png"></p><h3 id="11、快捷键列表"><a href="#11、快捷键列表" class="headerlink" title="11、快捷键列表"></a>11、快捷键列表</h3><p>你可以点击 VS Code 左下角的齿轮按钮，效果如下：</p><p><img src="http://img.smyhvae.com/20190418_1738.png"></p><p>上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：</p><p><img src="http://img.smyhvae.com/20190418_1739_2.png"></p><h3 id="快捷键参考表（官方）"><a href="#快捷键参考表（官方）" class="headerlink" title="快捷键参考表（官方）"></a>快捷键参考表（官方）</h3><p>VS Code官网提供了 PDF版本的键盘快捷键参考表，转需：</p><ul><li>Windows版本：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li><li>Mac 版本：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf</a></li><li>Linux版本：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf</a></li></ul><p>我们在 VS  Code软件里通过菜单栏「帮助–&gt;键盘快捷方式参考」也可以打开相应平台的快捷键大全（PDF版本）。</p><h2 id="三、高端访问：命令面板的使用"><a href="#三、高端访问：命令面板的使用" class="headerlink" title="三、高端访问：命令面板的使用"></a>三、高端访问：命令面板的使用</h2><p>Mac 用户按住快捷键 <code>Cmd+Shift+P</code> （Windows 用户按住快捷键<code>Ctrl+Shift+P</code>），可以打开快速命令面板。效果如下：</p><p><img src="http://img.smyhvae.com/20190329_1750_2.png"></p><p>命令面板的作用是<strong>希望解放开发者的鼠标，让一些操作和配置可以直接通过键盘进行</strong>。如果让开发者记住所有的配置项在菜单的哪个位置是不现实的，而且有些命令并不在菜单中。</p><p>有了命令面板之后，如果你需要修改一些设置项，或者进行一些快捷操作，则可以通过「命令面板」来操作，效率会更高。接下来列举一些。</p><h3 id="1、VS-Code-设置为中文语言"><a href="#1、VS-Code-设置为中文语言" class="headerlink" title="1、VS Code 设置为中文语言"></a>1、VS Code 设置为中文语言</h3><p>Mac 用户按住快捷键 <code>Cmd+Shift+P</code> （Windows 用户按住快捷键<code>Ctrl+Shift+P</code>），打开命令面板。</p><p>在命令面板中，输入<code>Configure Display Language</code>，选择<code>Install additional languages</code>，然后安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>即可。</p><p>或者，我们可以直接安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>，是一样的。</p><p>安装完成后，重启 VS Code。</p><h3 id="2、设置字体大小"><a href="#2、设置字体大小" class="headerlink" title="2、设置字体大小"></a>2、设置字体大小</h3><p>在命令面板输入“字体”，可以进行字体的设置，效果如下：</p><p><img src="http://img.smyhvae.com/20190329_2110.png"></p><p>当然，你也可以在菜单栏，选择「首选项-设置-常用设置」，在这个设置项里修改字体大小。</p><h3 id="3、快捷键设置"><a href="#3、快捷键设置" class="headerlink" title="3、快捷键设置"></a>3、快捷键设置</h3><p>在命令面板输入“快捷键”，就可以进入快捷键的设置。</p><h3 id="4、大小写转换"><a href="#4、大小写转换" class="headerlink" title="4、大小写转换"></a>4、大小写转换</h3><p>选中文本后，在命令面板中输入<code>transfrom</code>，就可以修改文本的大小写了。</p><p><img src="http://img.smyhvae.com/20190414_1751.png"></p><h3 id="5、使用命令行启动-VS-Code"><a href="#5、使用命令行启动-VS-Code" class="headerlink" title="5、使用命令行启动 VS Code"></a>5、使用命令行启动 VS Code</h3><p>（1）输入快捷键「Cmd + Shift + P 」，选择<code>install code command</code>：</p><p><img src="http://img.smyhvae.com/20191103_1327.png"></p><p>（2）使用命令行：</p><ul><li><code>code</code>命令：启动 VS Code 软件</li><li><code>code pathName/fileName</code>命令：通过 VS Code 软件打开指定目录&#x2F;指定文件。</li></ul><p>备注：这种方法快捷简单，但是在电脑重启之后就失效了。稍后在第五段，我会介绍更常见的方法。</p><h3 id="6、修改特定编程语言的设置项"><a href="#6、修改特定编程语言的设置项" class="headerlink" title="6、修改特定编程语言的设置项"></a>6、修改特定编程语言的设置项</h3><p>输入快捷键「Cmd + Shift + P 」打开命令面板，然后输入并执行 <code>Configure Language Specific Settings</code>即可。</p><p><img src="https://img.smyhvae.com/20211012_1039.png"></p><h2 id="四、私人订制：VS-Code-的常见配置"><a href="#四、私人订制：VS-Code-的常见配置" class="headerlink" title="四、私人订制：VS Code 的常见配置"></a>四、私人订制：VS Code 的常见配置</h2><h3 id="0、设置项介绍"><a href="#0、设置项介绍" class="headerlink" title="0、设置项介绍"></a>0、设置项介绍</h3><p>在修改 VS Code配置之前，我们需要知道，在哪里可以找到设置项的入口。</p><p><strong>方式1</strong>：Mac用户选择菜单栏「Code–&gt; 首选项–&gt;设置」，即可打开配置项：</p><p><img src="http://img.smyhvae.com/20210930_2009.png"></p><p><strong>方式2</strong>：点击软件右下角的设置图标：</p><p><img src="http://img.smyhvae.com/20210930_2016.png"></p><p><img src="https://img.smyhvae.com/20211012_1017.png"></p><p>如上图所示，VS Code提供两种不同范围的设置：</p><ul><li><strong>用户</strong>设置：全局生效。</li><li><strong>工作区</strong>设置：只针对当前项目生效。工作区设置会覆盖用户设置。适用于团队协作场景。工作区的设置文件是保存在当前项目根目录的<code>.vscode/settings.json</code>中，可以被提交到Git仓库，方便共享给项目组的其他成员。</li></ul><p>操作技巧：</p><p>（1）我们可以在设置面板的顶部搜索框，输入关键词，就能迅速定位到你想要的设置项。</p><p>（2）上图中，点击右上角的icon，可以通过 json文件的形式修改设置项。</p><h3 id="1、修改主题"><a href="#1、修改主题" class="headerlink" title="1、修改主题"></a>1、修改主题</h3><p>1）修改颜色主题：</p><p>选择菜单栏「Code –&gt; 首选项 –&gt; 颜色主题」：</p><p><img src="http://img.smyhvae.com/20210930_2017.png"></p><p>在弹出的对话框中，挑选你一个你喜欢的的颜色主题吧，或者安装其他颜色的主题：</p><p><img src="http://img.smyhvae.com/20211013_1018.png" alt="20211013_1018"></p><p>或者在设置项里搜索<code>Workbench: Color Theme</code>，进行修改。</p><p>2）修改文件图标的主题：</p><p>选择菜单栏「Code –&gt; 首选项 –&gt; 文件图标主题」：</p><p><img src="http://img.smyhvae.com/20211013_1015.png" alt="20211013_1015"></p><p>在弹出的对话框中，挑选你一个你喜欢的的主题吧，或者安装其他的主题：</p><p><img src="http://img.smyhvae.com/20211013_1019.png" alt="20211013_1019"></p><p>或者在设置项里搜索<code>Workbench: Icon Theme</code>，进行修改。</p><h3 id="2、面包屑（Breadcrumb）导航"><a href="#2、面包屑（Breadcrumb）导航" class="headerlink" title="2、面包屑（Breadcrumb）导航"></a>2、面包屑（Breadcrumb）导航</h3><p>打开 VS Code 的设置项，选择「用户设置 -&gt; 工作台 -&gt; 导航路径」，如下图所示：</p><p><img src="http://img.smyhvae.com/20191108_1550.png"></p><p>上图中，将红框部分打钩即可。</p><p>设置成功后，我们就可以查看到当前文件的「层级结构」，非常方便。如下图所示：</p><p><img src="http://img.smyhvae.com/20190415_2009.png"></p><p>有了这个面包屑导航，我们可以点击它，在任意目录、任意文件之间随意跳转。使用频繁非常高。</p><h3 id="3、是否显示代码的行号"><a href="#3、是否显示代码的行号" class="headerlink" title="3、是否显示代码的行号"></a>3、是否显示代码的行号</h3><p>VS Code 默认显示代码的行号。你可以在设置项里搜索 <code>editor.lineNumbers</code>修改设置，配置项如下：</p><p><img src="http://img.smyhvae.com/20190417_2140.png"></p><p>我建议保留这个设置项，无需修改。</p><h3 id="4、右侧是否显示代码的缩略图"><a href="#4、右侧是否显示代码的缩略图" class="headerlink" title="4、右侧是否显示代码的缩略图"></a>4、右侧是否显示代码的缩略图</h3><p>如果某个文件的代码量很大，缩略图就很有用了，可以预览全局，并在当前文件中快速跳转。</p><p>VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 <code>editor.minimap</code> 进行设置，配置项如下：</p><p><img src="http://img.smyhvae.com/20211012_1507.png"></p><p>上面这张图，你仔细琢磨下会发现，中文翻译十分精准。</p><h3 id="5、将当前行代码高亮显示（更改光标所在行的背景色）"><a href="#5、将当前行代码高亮显示（更改光标所在行的背景色）" class="headerlink" title="5、将当前行代码高亮显示（更改光标所在行的背景色）"></a>5、将当前行代码高亮显示（更改光标所在行的背景色）</h3><p>当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想<strong>高亮显示</strong>当前行的代码，需要设置两步：</p><p>（1）在设置项里搜索<code>editor.renderLineHighlight</code>，将选项值设置为<code>all</code>或者<code>line</code>。</p><p>（2）在设置项里增加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.lineHighlightBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00000090&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.lineHighlightBorder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ffffff30&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上方代码，第一行代码的意思是：修改光标所在行的背景色（背景色设置为全黑，不透明度 90%）；第二行代码的意思是：修改光标所在行的边框色。</p><h3 id="6、改完代码后立即自动保存"><a href="#6、改完代码后立即自动保存" class="headerlink" title="6、改完代码后立即自动保存"></a>6、改完代码后立即自动保存</h3><p><strong>方式一</strong>：</p><p>改完代码后，默认不会自动保存。你可以在设置项里搜索<code>files.autoSave</code>，修改参数值为<code>afterDelay</code>  ，即可自动保存。如下：</p><p><img src="https://img.smyhvae.com/20211012_2000.png"></p><p>files.autoSave的参数值有以下几种：</p><ul><li>off（默认值）：不自动保存。</li><li>afterDelay（建议配置）：文件修改超过一定时间（默认1秒）后，就自动保存。</li><li>onFocusChange：当前编辑器失去焦点时，则自动保存。如果我们将配置项修改为<code>onFocusChange</code>之后，那么，当光标离开该文件后，这个文件就会自动保存了。</li><li>onWindowChange：VS  Code软件失去焦点时，则自动保存。</li></ul><p><strong>方式二</strong>：</p><p>当然，你也可以直接在菜单栏选择「文件-自动保存」。勾选后，当你写完代码后，文件会立即实时保存。</p><h3 id="7、热退出"><a href="#7、热退出" class="headerlink" title="7、热退出"></a>7、热退出</h3><p>当VS Code退出后，它可以记住未保存的文件。如果你希望达到这种效果，那么，你需要先将设置项<code>files.hotExit</code>的值改为 <code>onExitAndWindowClose</code>。这个配置项要不要改，看你个人需要。比如我自己平时设置的值是<code>onExit</code>。</p><p><img src="http://img.smyhvae.com/20211012_2014.png" alt="20211012_2014"></p><h3 id="8、保存代码后，是否立即格式化"><a href="#8、保存代码后，是否立即格式化" class="headerlink" title="8、保存代码后，是否立即格式化"></a>8、保存代码后，是否立即格式化</h3><p>保存代码后，默认<strong>不会立即</strong>进行代码的格式化。你可以在设置项里搜索<code>editor.formatOnSave</code>查看该配置项：</p><p><img src="http://img.smyhvae.com/20190417_2213.png"></p><p>我觉得这个配置项保持默认就好，不用打钩。</p><h3 id="9、自动格式化粘贴的内容"><a href="#9、自动格式化粘贴的内容" class="headerlink" title="9、自动格式化粘贴的内容"></a>9、自动格式化粘贴的内容</h3><p>在设置项里搜索 <code>editor.formatOnPaste</code>，将设置项改为<code>true</code>：</p><p><img src="https://img.smyhvae.com/20211012_1049.png" alt="20211012_1049"></p><h3 id="10、设置字体大小"><a href="#10、设置字体大小" class="headerlink" title="10、设置字体大小"></a>10、设置字体大小</h3><p>在设置项里搜索<code>fontSize</code>，然后根据需要设置各种模块的字体大小：</p><p><img src="http://img.smyhvae.com/20211012_1053.png" alt="20211012_1053"></p><h3 id="11、空格-or-制表符"><a href="#11、空格-or-制表符" class="headerlink" title="11、空格 or 制表符"></a>11、空格 or 制表符</h3><p>VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下 tab 键后，编辑器就会识别成制表符。</p><p>（1）建议的设置项如下：</p><ul><li><strong>editor.detectIndentation</strong>：自动检测（默认开启）。建议把这个配置项修改为 false，截图如下：</li></ul><p><img src="https://img.smyhvae.com/20211012_1139.png" alt="20211012_1139"></p><p>这样做，是为了取消系统的自动缩进，建议自己手动格式化比较好。 参考链接：<a href="https://www.yisu.com/zixun/327399.html">https://www.yisu.com/zixun/327399.html</a></p><ul><li><strong>editor.insertSpaces</strong>：按 Tab 键时插入空格（默认值为true）。截图如下：</li></ul><p><img src="http://img.smyhvae.com/20190417_2207.png"></p><ul><li><strong>editor.tabSize</strong>：一个制表符默认等于四个空格。截图如下：</li></ul><p><img src="http://img.smyhvae.com/20190417_2209.png"></p><p>（2）状态栏也会显示当前的缩进值。点击状态栏，可以直接修改 tabSize 缩进值：</p><p><img src="http://img.smyhvae.com/20211009_1610.png"></p><p>（3）另外，我们还可以安装 prettier 插件，设置代码在格式化时默认缩进值。prettier 是做代码格式化的最常见工具。</p><p><img src="https://img.smyhvae.com/20211009_1637.png"></p><p>（4）去掉每一行末尾的空格。在设置项里搜索<code>空格</code>或者<code>&quot;files.trimTrailingWhitespace&quot;</code>，将值设置为 true：</p><p><img src="http://img.smyhvae.com/20211012_1231.png" alt="20211012_1231"></p><p>一般来说，每一行代码末尾的空格是多余的，所以建议去掉。</p><h3 id="12、直观地显示代码里的空格和缩进-✨"><a href="#12、直观地显示代码里的空格和缩进-✨" class="headerlink" title="12、直观地显示代码里的空格和缩进 ✨"></a>12、直观地显示代码里的空格和缩进 ✨</h3><p>代码里如果有缩进或者空格，肉眼是看不出来的，但是我们可以修改配置项，把它揪出来。</p><p>在配置项里搜索<code>editor.renderWhitespace</code>，修改为<code>all</code>：</p><p><img src="http://img.smyhvae.com/20211012_1150.png" alt="20211012_1150"></p><p>修改之后，代码里的空格、缩进的展示效果如下：</p><p><img src="http://img.smyhvae.com/20211012_1258.png" alt="20211012_1258"></p><p>看到了没？哪里有空格、哪里是缩进，全都一目了然。</p><h3 id="13、新建文件后的默认文件类型"><a href="#13、新建文件后的默认文件类型" class="headerlink" title="13、新建文件后的默认文件类型"></a>13、新建文件后的默认文件类型</h3><p>当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。</p><p>如果你想修改默认的文件类型，可以在设置项里搜索<code>files.defaultLanguage</code>，设置项如下：</p><p><img src="http://img.smyhvae.com/20190417_2221.png"></p><p>上图中的红框部分，填入你期望的默认文件类型。我填的是<code>html</code>类型，你也可以填写成 <code>javascript</code> 或者 <code>markdown</code>，或者其他的语言类型。</p><h3 id="14、删除文件时，是否弹出确认框"><a href="#14、删除文件时，是否弹出确认框" class="headerlink" title="14、删除文件时，是否弹出确认框"></a>14、删除文件时，是否弹出确认框</h3><p>当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索<code>xplorer.confirmDelete</code>。截图如下：</p><p><img src="http://img.smyhvae.com/20190418_1758.png"></p><p>我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？</p><h3 id="15、在新窗口打开文件-x2F-文件夹"><a href="#15、在新窗口打开文件-x2F-文件夹" class="headerlink" title="15、在新窗口打开文件&#x2F;文件夹"></a>15、在新窗口打开文件&#x2F;文件夹</h3><p>通过 <code>window.openFoldersInNewWindow</code>（默认值为off）和<code>window.openFilesInNewWindow</code>（默认值为default），可以配置在打开文件夹、打开文件时，是否开启一个新的窗口。我个人建议，把这两个配置项都设置为 on，避免旧的窗口被覆盖：</p><p><img src="http://img.smyhvae.com/20211012_1700.png"></p><p>补充知识—— <code>window.restoreWindows</code>可以用来配置 如何恢复之前的会话窗口。涉及到的场景是：你把 VS Code 关闭了，然后又打开了，是否要展示之前打开过的文件、文件夹？参数值有以下几种：</p><ul><li>one（默认配置）：只会重新打开上一次回话中最后操作的那一个窗口。</li><li>none：打开一个空的窗口，不包含任何文件、文件夹。</li><li>all（建议配置）：恢复上一次会话中的所有窗口。</li><li>folders：恢复上一次会话中包含文件夹的窗口。</li></ul><p><img src="http://img.smyhvae.com/20211012_1704.png" alt="20211012_1704"></p><blockquote><p>接下来，我们来讲一些更高级的操作。</p></blockquote><h2 id="五、纵享丝滑：常见操作和使用技巧"><a href="#五、纵享丝滑：常见操作和使用技巧" class="headerlink" title="五、纵享丝滑：常见操作和使用技巧"></a>五、纵享丝滑：常见操作和使用技巧</h2><h3 id="1、快速生成HTML骨架"><a href="#1、快速生成HTML骨架" class="headerlink" title="1、快速生成HTML骨架"></a>1、快速生成HTML骨架</h3><p>先新建一个空的html文件，然后通过以下方式，可以快速生成html骨架。</p><p><strong>方式1</strong>：输入<code>!</code>，然后按下<code>enter</code>键，即可生成html骨架。如下图：</p><p><img src="https://img.smyhvae.com/20210623-2115.gif"></p><p><strong>方式2</strong>：输入<code>html:5</code>，然后按住 <code>Tab</code>键，即可生成html骨架。</p><p>生成的骨架，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了上面的html骨架之后，我们就可以快乐地在里面插入CSS 代码和 JS 代码。</p><h3 id="2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）"><a href="#2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）" class="headerlink" title="2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）"></a>2、并排编辑：左右（上下）显示多个编辑器窗口（copy代码利器）</h3><blockquote><p>并排编辑是所有的编辑操作中最常用的一个技巧，十分有用。比如我们在开发一个项目时，可能需要同时打开 HTML 文件和 CSS 文件，很常见。</p></blockquote><p>Mac 用户按住快捷键 <code>Cmd + \</code>， Windows 用户按住快捷键<code>Ctrl + \</code>，即可同时打开多个编辑器窗口，进行并排编辑。效果如下：</p><p><img src="http://img.smyhvae.com/20200619_0030.gif"></p><p>按快捷键「Cmd + 1 」切换到左边的窗口，按快捷键「Cmd + 2 」切换到右边的窗口，以此类推。随时随地，想切就切。</p><p>学会了这一招，以后 copy 代码的时候，leader 再也不用担心我抄得慢了，一天工资到手。</p><hr><p>当然，使用快捷键<code>Cmd + \</code>只是其中一种方式，我们还有很多种方式打开并行编辑。我们来做一个汇总。</p><p>如果你已经打开了一个编辑器，那么可以通过以下几种方式在另一侧打开另一个编辑器：（按照使用频率，从高到低排序）</p><ul><li>使用快捷键<code>Cmd + \</code>将编辑器一分为二。</li><li>使用快捷键<code>Cmd + P</code>调出文件列表，选择要打开的文件，然后按下 <code>Cmd + Enter</code>快捷键。【重要】</li><li>按住 Option 键的同时，单击资源管理器的文件（Windows 用户是按 Alt 键）。</li><li>点击编辑器右上角的 <code>Split Editor</code>按钮。</li><li>选择菜单栏「查看–&gt; 编辑器布局」，然后选择你具体想要的布局，如下图所示：</li></ul><p><img src="http://img.smyhvae.com/20211012_1451.png" alt="20211012_1451"></p><ul><li>通过拖拽，把当前文件移动到任意一侧。</li></ul><p>补充知识：通过配置项<code>worbench.editor.OpenSideBySideDirection</code>可以控制编辑器在并排打开时出现的默认位置（默认值为right，你也可以根据需要改为 down）。如下图所示：</p><p><img src="http://img.smyhvae.com/20211012_1455.png" alt="20211012_1455"></p><h3 id="3、从终端-code-命令启动-VS-Code（Mac电脑）"><a href="#3、从终端-code-命令启动-VS-Code（Mac电脑）" class="headerlink" title="3、从终端 code 命令启动 VS Code（Mac电脑）"></a>3、从终端 code 命令启动 VS Code（Mac电脑）</h3><p>在终端输入<code>code</code>或者输入 <code>code + 指定项目的目录</code>，就可以启动 VS  Code，十分便捷。即：</p><ul><li><code>code</code> 命令：启动 VS Code 软件。</li><li><code>code pathName/fileName</code> 命令：通过 VS Code 软件打开指定目录&#x2F;指定文件。</li></ul><p>为了达到目的，我们需要先将 VS Code的软件安装路径添加到环境变量，一劳永逸。具体操作如下：</p><p>（1）打开 <code>bash_profile</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim ./bash_profile</span><br></pre></td></tr></table></figure><p>（2）在 bash_profile 中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从终端启动VS Code，并设置vscode启动的命令别名</span></span><br><span class="line"><span class="built_in">alias</span> code=<span class="string">&quot;/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code&quot;</span></span><br></pre></td></tr></table></figure><p>注意，由于<code>Visual Studio Code.app</code>这个路径里有空格，所以需要在空格前面加上反斜杠<code>\</code>。</p><p>（3）重启环境变量的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重启</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>大功告成。</p><p>改完之后，如果没生效，那你把  <code>bash_profile</code>文件 换成 <code>zshrc</code>文件试试。</p><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/logan_LG/article/details/106800904">mac通过终端code 命令打开vscode</a></li></ul><h3 id="3、从终端-code-命令启动-VS-Code（Windows电脑）"><a href="#3、从终端-code-命令启动-VS-Code（Windows电脑）" class="headerlink" title="3、从终端 code 命令启动 VS Code（Windows电脑）"></a>3、从终端 code 命令启动 VS Code（Windows电脑）</h3><p>在终端输入<code>code</code>或者输入 <code>code + 指定项目的目录</code>，就可以启动 VS  Code，十分便捷。即：</p><ul><li><code>code</code> 命令：启动 VS Code 软件。</li><li><code>code pathName/fileName</code> 命令：通过 VS Code 软件打开指定目录&#x2F;指定文件。</li></ul><p>为了达到目的，我们需要先将 VS Code的软件安装路径添加到环境变量，一劳永逸。具体操作如下：</p><p>（1）打开 VS Code 的安装位置，进入bin文件夹，复制路径。比如：<code>D:\Microsoft VS Code\bin</code>。</p><p>（2）回到桌面，右键我的电脑–&gt;高级系统设置–&gt;环境变量–&gt;编辑path值，在原来的path后面，追加内容<code>;D:\Microsoft VS Code\bin</code>（即英文的分号+VS  Code 的 bin 路径)</p><p>（3）重启电脑，大功告成。</p><p>改完之后，如果没生效，那八成是因为你填的 path 值有问题。</p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/zyl-Tara/p/10642704.html">windows使用 code . 命令打开vscode</a></li></ul><h3 id="4、在当前文件中搜索"><a href="#4、在当前文件中搜索" class="headerlink" title="4、在当前文件中搜索"></a>4、在当前文件中搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li><p>Cmd + F（Win 用户是 Ctrl + F）：在当前文件中搜索，光标在搜索框里</p></li><li><p>Cmd + G（Win 用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里</p></li></ul><p>多个搜索结果出来之后，按下 Enter 键之后跳转到下一个搜索结果，按下 Shift + Enter 键之后跳转到上一个搜索结果。</p><p>另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：</p><p><img src="http://img.smyhvae.com/20190415_2052.png"></p><p>上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。</p><p>「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 <code>editor.find.autoFindInSelection</code>，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以<strong>自动</strong>只在这些内容里进行查找。该设置项如下图所示：</p><p><img src="http://img.smyhvae.com/20191108_1655.png"></p><h3 id="5、全局搜索"><a href="#5、全局搜索" class="headerlink" title="5、全局搜索"></a>5、全局搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li>Cmd + Shift + F（Win 用户是 Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：</li></ul><p><img src="http://img.smyhvae.com/20211012_1548.png" alt="20211012_1548"></p><p>上图中，你可以点击<strong>红框</strong>部分，展开更多的配置项。然后点击<strong>红圈</strong>部分，进行过滤搜索。注意，第二个红圈那里会经常用到，它可以在搜索时过滤掉  <code>.git</code>、<code>.node_modules</code>等忽略文件。</p><p>上图中，我们还可以点击“在编辑器中打开”，在一个单独的文件中聚合展示搜索结果：</p><p><img src="https://img.smyhvae.com/20211012_1609.png"></p><h3 id="6、文件名-x2F-文件夹的搜索"><a href="#6、文件名-x2F-文件夹的搜索" class="headerlink" title="6、文件名&#x2F;文件夹的搜索"></a>6、文件名&#x2F;文件夹的搜索</h3><p>前面的快捷键那一段我们讲过，通过 「Cmd + P」可以快速搜索并打开<strong>文件</strong>&#x2F;文件夹。这种方式，一般用于快速打开最近编辑过的文件。</p><p>其实还有一种很巧妙的方式，可以在整个项目里，既能搜到文件，也能搜到<strong>文件夹</strong>。这种方式，常用于<strong>过滤项目的目录</strong>。操作方法很简单：</p><blockquote><p>直接在文件资源管理器输入关键字就行。搜索结果会自动出现；使用方向键进行上下移动，可以在搜索的文件和文件夹之间进行跳转。</p><p>另外，右上角会看到一个过滤器，点击下图中的红圈部分，则只显示匹配的文件和文件夹。</p></blockquote><p><img src="http://img.smyhvae.com/20211012_1616.png" alt="20211012_1616"></p><p>当然，这招也有一点不足：不能搜中文。</p><h3 id="7、大纲视图"><a href="#7、大纲视图" class="headerlink" title="7、大纲视图"></a>7、大纲视图</h3><p>如下图所示，大纲视图可以展示当前代码的方法结构、文件的目录结构：</p><p><img src="http://img.smyhvae.com/20211012_1628.png" alt="20211012_1628"></p><p><img src="http://img.smyhvae.com/20211012_1636.png" alt="20211012_1636"></p><h3 id="8、文件对比"><a href="#8、文件对比" class="headerlink" title="8、文件对比"></a>8、文件对比</h3><p>VS Code 默认支持<strong>对比两个文件的内容</strong>。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：</p><p><img src="http://img.smyhvae.com/20190329_1756.png"></p><p>VS Code 自带的对比功能并不够强大，我们可以安装插件<code>compareit</code>，进行更丰富的对比。比如说，安装完插件<code>compareit</code>之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：</p><p><img src="http://img.smyhvae.com/20190329_1757.png"></p><p>如果你安装了 GitLens 插件，还可以将两个git分支的代码进行比对，非常完美。</p><h3 id="9、查找某个函数在哪些地方被调用了"><a href="#9、查找某个函数在哪些地方被调用了" class="headerlink" title="9、查找某个函数在哪些地方被调用了"></a>9、查找某个函数在哪些地方被调用了</h3><p>比如我已经在<code>a.js</code>文件里调用了 <code>foo()</code>函数。那么，如果我想知道<code>foo()</code>函数在其他文件中是否也被调用了，该怎么做呢？</p><p>做法如下：在 <code>a.js</code> 文件里，选中<code>foo()</code>函数（或者将光标放置在<code>foo()</code>函数上），然后按住快捷键「Shift + F12」，就能看到 <code>foo()</code>函数在哪些地方被调用了，比较实用。</p><h3 id="10、鼠标操作"><a href="#10、鼠标操作" class="headerlink" title="10、鼠标操作"></a>10、鼠标操作</h3><ul><li><p>在当前行的位置，鼠标三击，可以选中当前行。</p></li><li><p>用鼠标单击文件的<strong>行号</strong>，可以选中当前行。</p></li><li><p>在某个<strong>行号</strong>的位置，<strong>上下移动鼠标，可以选中多行</strong>。</p></li></ul><h3 id="11、重构"><a href="#11、重构" class="headerlink" title="11、重构"></a>11、重构</h3><p>重构分很多种，我们来举几个例子。</p><p><strong>命名重构</strong>：</p><p>当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。</p><p><strong>方法重构</strong>：</p><p>选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。</p><h3 id="12：终端配置"><a href="#12：终端配置" class="headerlink" title="12：终端配置"></a>12：终端配置</h3><p>VS Code软件自带了终端，但我个人认为不是很好用，而且VS Code 软件关了之后，终端也没了。建议大家使用其他的终端软件，专业的事情交给专业的人做。</p><ul><li>Windows平台的终端：推荐 PowerShell 软件。远程终端推荐 xshell 软件。</li><li>Mac平台的终端：推荐 <a href="https://iterm2.com/">iTerm2 </a>。 iTerm2 是Mac平台最好用的终端软件，没有之一。</li></ul><p><strong>右键行为</strong>：</p><blockquote><p>在终端上，单击右键所产生的行为在不同的系统里是不同的。</p></blockquote><ul><li>Windows：如果有<strong>选定</strong>文本，则复制当前文本；如果没有选定文本，则粘贴。</li><li>macOS：选中光标所在位置的单词，并显示右键菜单。</li><li>Linux：显示右键菜单。</li></ul><h3 id="13、Git-版本管理"><a href="#13、Git-版本管理" class="headerlink" title="13、Git 版本管理"></a>13、Git 版本管理</h3><p>在 VS Code中使用Git之前，需要你先安装 Git 环境。</p><p>VS Code 自带了 Git 版本管理的功能，如下图所示：</p><p><img src="http://img.smyhvae.com/20190418_1850.png"></p><p>上图中，我们可以在这里进行常见的 git 命令操作。如果你还不熟悉 <strong>Git 版本管理</strong>，可以先去补补课。</p><p>我自己用的最多的功能是<strong>diff 代码</strong>和<strong>合并冲突</strong>，自从用上了  VS Code 的这两个功能，简直离不开它。</p><p>我们先来看看 diff 代码的效果：</p><p><img src="https://img.smyhvae.com/20211013_1411.png" alt="20211013_1411"></p><p>上图中，点击右上角的<code>...</code>，然后点击<code>内联视图</code>，则可以换一种视图 diff 代码：</p><p><img src="https://img.smyhvae.com/20211013_1415.png"></p><p><strong>Git状态栏</strong>：</p><p><img src="http://img.smyhvae.com/20211013_1421.png" alt="20211013_1421"></p><p>在VS Code的左下角会显示Git状态栏。如果当前代码仓库配置了远程仓库，那么“同步更改”会显示以下信息：</p><ul><li>左边的数字：表示远程分支比本地分支多了XX个 Git commit。</li><li>右边的数字：表示本地分支比远程分支多了XX个 Git commit。</li></ul><p>点击“同步更改”按钮，会拉取（pull）远程分支到本地分支，并推送（push）本地的Git commit到远程分支。</p><p>如果当前代码仓库没有配置远程仓库，则会显示“发布更改”的按钮。点击“发布更改”按钮，会把当前分支push到远程仓库。</p><hr><p>另外，我建议安装插件<code>GitLens</code>搭配使用，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。</p><p>我还要补充一句：</p><p>有人说，高手都是直接用命令行操作Git。然而，根据我多年的经验来看，如果你的代码仓库需要管理的分支特别多，与团队的其他成员需要经常协作，那么，我建议你<strong>优先使用</strong> GUI 图形化工具来操作Git，避免出错。</p><p>我推荐的GUI版的Git工具有：</p><ul><li><a href="https://www.git-tower.com/">Tower</a></li><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a></li><li><a href="https://www.gitkraken.com/">GitKraken</a></li></ul><h3 id="14、将工作区放大-x2F-缩小"><a href="#14、将工作区放大-x2F-缩小" class="headerlink" title="14、将工作区放大&#x2F;缩小"></a>14、将工作区放大&#x2F;缩小</h3><p>我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。</p><p>如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「**cmd +&#x2F;-**」。windows 用户是按下「ctrl +&#x2F;-」</p><p><strong>当我们在投影仪上给别人演示代码的时候，这一招十分管用</strong>。</p><p>如果你想恢复默认的工作区大小，可以在命令面板输入<code>重置缩放</code>（英文是<code>reset zoom</code>）</p><p>f### 11、创建多层子文件夹</p><p>我们可以在新建文件夹的时候，如果直接输入<code>aa/bb/cc</code>，比如：</p><p><img src="http://img.smyhvae.com/20190418_2022.png"></p><p>那么，就可以创建多层子文件夹，效果如下：</p><p><img src="http://img.smyhvae.com/20190418_2023.png"></p><h3 id="15、-vscode-文件夹的作用"><a href="#15、-vscode-文件夹的作用" class="headerlink" title="15、.vscode 文件夹的作用"></a>15、<code>.vscode</code> 文件夹的作用</h3><p>为了统一团队的 vscode 配置，我们可以在项目的根目录下建立<code>.vscode</code>目录，在里面放置一些配置内容，比如：</p><ul><li><p><code>settings.json</code>：工作空间设置、代码格式化配置、插件配置。</p></li><li><p><code>sftp.json</code>：ftp 文件传输的配置。</p></li></ul><p><code>.vscode</code>目录里的配置只针对当前项目范围内生效。将<code>.vscode</code>提交到代码仓库，大家统一配置时，会非常方便。</p><h3 id="16、自带终端"><a href="#16、自带终端" class="headerlink" title="16、自带终端"></a>16、自带终端</h3><p>我们可以按下「Ctrl + &#96;」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 <strong>item2</strong>。</p><h3 id="17、markdown-语法支持"><a href="#17、markdown-语法支持" class="headerlink" title="17、markdown 语法支持"></a>17、markdown 语法支持</h3><p>VS Code 自带 markdown 语法高亮。也就是说，如果你是用 markdown 格式写文章，则完全可以用 VS Code 进行写作。</p><p>写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：</p><p><img src="http://img.smyhvae.com/20190418_1907.png"></p><p>我一般是安装「Markdown Preview Github Styling」插件，以 GitHub 风格预览 Markdown 样式。样式十分简洁美观。</p><p>你也可以在控制面板输入<code>Markdown: 打开预览</code>，直接全屏预览 markdown 文件。</p><h3 id="18、Emmet-in-VS-Code"><a href="#18、Emmet-in-VS-Code" class="headerlink" title="18、Emmet in VS Code"></a>18、Emmet in VS Code</h3><p><code>Emmet</code>可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。</p><p>举个例子，我们在编辑器中输入缩写代码：<code>ul&gt;li*6</code> ，然后按下 Tab 键，即可得到如下代码片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VS Code 默认支持 Emmet。更多 Emmet 语法规则，可以自行查阅。</p><h3 id="19、修改字体，使用「Fira-Code」字体"><a href="#19、修改字体，使用「Fira-Code」字体" class="headerlink" title="19、修改字体，使用「Fira Code」字体"></a>19、修改字体，使用「Fira Code」字体</h3><p>这款字体很漂亮，很适合用来写代码：</p><p><img src="https://img.smyhvae.com/20200516_1633-2.png"></p><p>安装步骤如下：</p><p>（1）进入 <a href="https://github.com/tonsky/FiraCode">https://github.com/tonsky/FiraCode</a> 网站，下载并安装「Fira Code」字体。</p><p>（2）打开 VS Code 的「设置」，搜索<code>font</code>，修改相关配置为如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Fira Code&#x27;,Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置字体显示</span></span><br><span class="line"><span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//控制是否启用字体连字，true启用，false不启用</span></span><br></pre></td></tr></table></figure><p>上方的第二行配置，取决于个人习惯，我是直接设置为<code>&quot;editor.fontLigatures&quot;: null</code>，因为我不太习惯连字。</p><h3 id="20、代码格式化"><a href="#20、代码格式化" class="headerlink" title="20、代码格式化"></a>20、代码格式化</h3><p>VS Code 默认对 JavaScript、TypeScript、JSON、HTML 提供了开箱即用的代码格式化支持。其他语言则需要先安装相应的插件才能支持。</p><p>另外，我们还可以安装 Prettier 插件进行<strong>更精细</strong>的代码格式化。下一段将插件的时候，会讲解。</p><h3 id="21、智能提示-IntelliSense"><a href="#21、智能提示-IntelliSense" class="headerlink" title="21、智能提示 IntelliSense"></a>21、智能提示 IntelliSense</h3><p>VS Code 默认对 JavaScript、TypeScript、JSON、HTML、CSS、SCSS、Less这7种语言（文件）提供了<strong>智能提示</strong>的支持。其他编程语言则需要先安装相应的插件才能支持。</p><p>在 VS Code插件职场中，下图是最受欢迎的8种<a href="https://marketplace.visualstudio.com/search?target=VSCode&category=Programming%20Languages&sortBy=Installs">编程语言插件</a>：</p><p><img src="https://img.smyhvae.com/20211013_1120.png" alt="20211013_1120"></p><p>智能提示的功能很强大， 包括函数介绍、代码自动补全等等。</p><h3 id="22、调试与运行"><a href="#22、调试与运行" class="headerlink" title="22、调试与运行"></a>22、调试与运行</h3><p>VS Code <strong>内置</strong>了对 Node.js 运行时的调试支持，可以直接调试  JavaScript 和 TypeScript。其他编程语言的调试，则需要先安装相应的插件才能支持。</p><p>在 VS Code插件市场中，下图是最受欢迎的几种调试插件：</p><p><img src="https://img.smyhvae.com/20211013_1650.png"></p><h3 id="23、文件传输：sftp"><a href="#23、文件传输：sftp" class="headerlink" title="23、文件传输：sftp"></a>23、文件传输：sftp</h3><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器（需要先把服务端的配置搭建好），可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><p>步骤如下：</p><p>（1）安装插件<code>sftp</code>。</p><p>（2）配置 <code>sftp.json</code>文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入<code>sftp:config</code>，回车，当前工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的内容可以是：</p><ul><li><p><code>host</code>：服务器的 IP 地址</p></li><li><p><code>username</code>：用户名</p></li><li><p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件）</p></li><li><p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用 sftp 上传文件之前，要手动在工作站上 mkdir 生成这个根目录</p></li><li><p><code>ignore</code>：指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p></li></ul><p>举例如下：(注意，其中的注释需要去掉)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.xxx.xxx&quot;</span><span class="punctuation">,</span> <span class="comment">//服务器ip</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="comment">//端口，sftp模式是22</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//用户名</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//密码</span></span><br><span class="line">  <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sftp&quot;</span><span class="punctuation">,</span> <span class="comment">//模式</span></span><br><span class="line">  <span class="attr">&quot;agent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;privateKeyPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;passphrase&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;passive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;interactiveAuth&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/root/node/build/&quot;</span><span class="punctuation">,</span> <span class="comment">//服务器上的文件地址</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./server/build&quot;</span><span class="punctuation">,</span> <span class="comment">//本地的文件地址</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;uploadOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//监听保存并上传</span></span><br><span class="line">  <span class="attr">&quot;syncMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;update&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//监听外部文件</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//外部文件的绝对路径</span></span><br><span class="line">    <span class="attr">&quot;autoUpload&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">//忽略项</span></span><br><span class="line">    <span class="string">&quot;**/.vscode/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/.git/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/.DS_Store&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>（3）在 VS Code 的当前文件里，选择「右键 -&gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 <code>host</code> 中配置的服务器 ip）。</p><p>我们还可以选择「右键 -&gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比，非常方便。</p><h3 id="24、沉浸模式-x2F-禅模式"><a href="#24、沉浸模式-x2F-禅模式" class="headerlink" title="24、沉浸模式&#x2F;禅模式"></a>24、沉浸模式&#x2F;禅模式</h3><p>程序员写代码需要专注，有时需要进入一种心流。VS Code给我们提供了一种全屏下的沉浸模式，周围的面板都会被隐藏起来，只显示编辑器部分。</p><p>操作方法：菜单栏选择「查看-外观-禅模式」即可；或者按下快捷键<code>Cmd + K</code>，放手，再按<code>Z</code>也可以达到目的。</p><h3 id="正则表达式批量删除字符串"><a href="#正则表达式批量删除字符串" class="headerlink" title="正则表达式批量删除字符串"></a>正则表达式批量删除字符串</h3><p><strong>需求</strong>：将文本中的字符串<code>axxxxb</code>，批量替换为<code>ab</code>。其中，开头字符 a 和 结尾字符 b 固定，中间xxx长度不确定。</p><p><strong>解决</strong>：传统查找替换无法胜任。可以使用VScode正则表达式功能，查找<code>a.*?b</code>替换为<code>ab</code>即可。其中<code>?</code>是禁止贪婪匹配，否则会误删很多内容。</p><hr><p><strong>拓展需求</strong>：需求——将文本中的字符串<code>axxxx</code>，批量替换为<code>a</code>。其中，开头字符 a 固定，后面的xxx长度不确定。</p><p><strong>解决</strong>：传统查找替换无法胜任。可以使用VScode正则表达式功能，查找<code>a.*?\n</code>替换为<code>a\n</code>即可。</p><h2 id="六、三头六臂：VS-Code-插件介绍-amp-插件推荐"><a href="#六、三头六臂：VS-Code-插件介绍-amp-插件推荐" class="headerlink" title="六、三头六臂：VS Code 插件介绍 &amp; 插件推荐"></a>六、三头六臂：VS Code 插件介绍 &amp; 插件推荐</h2><p>VS Code 有一个很强大的功能就是支持插件扩展，让你的编辑器仿佛拥有了三头六臂。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><img src="http://img.smyhvae.com/20191108_1553_2.png"></p><p>上图中，点击红框部分，即可在顶部输入框里，查找你想要的插件名，然后进行安装。</p><p>插件安装完成后，记得重启软件（或者点击插件位置的“重新加载”），插件才会生效。</p><p>另外，我们还可以访问官网的插件市场来安装插件：</p><ul><li>VS Code插件市场（官方）：<a href="https://marketplace.visualstudio.com/vscode">https://marketplace.visualstudio.com/vscode</a></li></ul><p><strong>插件的安装目录</strong>：</p><ul><li>Windows：：<code>%USERPROFILE%\.vscode\extensions</code></li><li>macOS：<code>~/.vscode/extensions</code></li><li>macOS：<code>~/.vscode/extensions</code></li></ul><h3 id="插件的类型"><a href="#插件的类型" class="headerlink" title="插件的类型"></a>插件的类型</h3><p><img src="http://img.smyhvae.com/20211013_1757_2.png" alt="20211013_1757_2"></p><p>插件市场的首页有四个模块，可以作为重要的信息来源：</p><ul><li>Featured：由  VS Code团队精心推荐的插件。</li><li>Trending：近期热门插件。</li><li>Most Popular：按总安装量排序的插件。</li><li>Recently Added：最新发布的插件。</li></ul><p><img src="http://img.smyhvae.com/20211013_1758.png" alt="20211013_1758"></p><p><img src="http://img.smyhvae.com/20211013_1955.png" alt="20211013_1955"></p><p>插件市场至少有17种类型的插件：（按照数量排序）</p><ul><li>Themes：主题插件</li><li>Programming Languages：编程语言插件</li><li>Snippets：代码片段</li><li>Extension Packs：插件包，里面包括多个插件</li><li>Formatters：代码格式化</li><li>Linters：静态检查</li><li>Debuggers：调试器</li><li>Keymaps：快捷键映射</li><li>Visualization：可视化</li><li>Language Packs：各国的语言插件</li><li>Azure：Azure 云计算</li><li>Data Science：数据科学</li><li>SCM Providers：源代码控制管理器（source control manager）</li><li>Notebooks</li><li>Education：教育</li><li>Testing：测试相关</li><li>Machine Learning：机器学习</li><li>Others：其他</li></ul><h3 id="插件的过滤显示"><a href="#插件的过滤显示" class="headerlink" title="插件的过滤显示"></a>插件的过滤显示</h3><p>在 VS  Code中打开插件管理视图，可以针对已安装的插件，进行过滤展示。</p><p>1）点击插件视图右上角的<code>...</code>按钮，可以展示不同状态的插件：</p><p><img src="http://img.smyhvae.com/20211013_2011.png" alt="20211013_2011"></p><p>2）在搜索框输入字符<code>@</code>，会展示出不同类型的过滤器：</p><p><img src="http://img.smyhvae.com/20211013_2015.png" alt="20211013_2015"></p><p><strong>常见的过滤器如下</strong>：</p><p>1）按大类搜：</p><ul><li><code>@builtin</code>：显示 VS Code内置的插件</li><li><code>@disabled</code>：显示被禁用的插件</li><li><code>@enabled</code>：显示已启用的插件</li><li><code>@installed</code>：显示已安装的插件</li><li><code>@outdated</code>：显示待更新的插件</li></ul><p>2）精准搜索：</p><ul><li><code>@id</code>：按id显示插件</li><li><code>@tag</code>：根据标签显示插件。</li></ul><p>3）对插件进行排序：</p><ul><li><code>@sort:installs</code>：根据插件的安装量排序</li><li><code>@sourt:rating</code>：根据插件的评分排序</li><li><code>@sort:name</code>：根据插件名字的字母顺序排序</li></ul><p>4）组合搜索：（举例）</p><ul><li><code>@installed @category:themes</code>：显示已安装的主题插件。</li><li><code>@sort:installs java</code>：对 Java 相关的插件按照安装量排序。</li></ul><p>下面的内容，我来列举一些常见的插件，这些插件都很实用，小伙伴们可以按需安装。注意：每一类插件里，<strong>顺序越靠前，越实用</strong>。</p><h3 id="1、基本插件"><a href="#1、基本插件" class="headerlink" title="1、基本插件"></a>1、基本插件</h3><h4 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h4><p>让软件显示为简体中文语言。</p><h3 id="2、Git-相关插件"><a href="#2、Git-相关插件" class="headerlink" title="2、Git 相关插件"></a>2、Git 相关插件</h3><h4 id="GitLens-【荐】"><a href="#GitLens-【荐】" class="headerlink" title="GitLens 【荐】"></a>GitLens 【荐】</h4><p>我强烈建议你安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是 Git 神器，码农必备。如果你不知道，那真是 out 了。</p><p>GitLens 在 Git 管理上有很多强大的功能，比如：</p><ul><li>将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。</li><li>查看某个 commit 的代码改动记录</li><li>查看不同的分支</li><li>可以将两个 commit 进行代码对比</li><li>甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支 review 代码的时候，就可以用到这一招。</li></ul><p>打开你的 Git仓库，未安装  GitLens 时是这样的：</p><p><img src="http://img.smyhvae.com/20211009_1400.png"></p><p>安装了  GitLens 之后是这样的：</p><p><img src="http://img.smyhvae.com/20211009_1430.png"></p><p>上图中，红框部分就是  GitLens 的功能，诸君可以自由发挥。</p><p>补充一个有意思的趣事：Python插件、Ruby插件、GitLens插件、Vetur插件，这四个插件的开发者先后加入了微软。</p><h4 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h4><p>有些同学习惯使用编辑器中的 Git 管理工具，而不太喜欢要打开另外一个 Git UI 工具的同学，这一款插件满足你查询所有 Git 记录的需求。</p><h4 id="Local-History-【荐】"><a href="#Local-History-【荐】" class="headerlink" title="Local History 【荐】"></a>Local History 【荐】</h4><p>维护文件的本地历史记录。代码意外丢失时，有时可以救命。</p><p><img src="http://img.smyhvae.com/20200618_2246.png"></p><h3 id="3、代码智能提示插件"><a href="#3、代码智能提示插件" class="headerlink" title="3、代码智能提示插件"></a>3、代码智能提示插件</h3><h4 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h4><p>Vue 多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。VS Code 官方钦定 Vue 插件，Vue 开发者必备。</p><h4 id="ES7-React-x2F-Redux-x2F-GraphQL-x2F-React-Native-snippets"><a href="#ES7-React-x2F-Redux-x2F-GraphQL-x2F-React-Native-snippets" class="headerlink" title="ES7 React&#x2F;Redux&#x2F;GraphQL&#x2F;React-Native snippets"></a>ES7 React&#x2F;Redux&#x2F;GraphQL&#x2F;React-Native snippets</h4><p>React&#x2F;Redux&#x2F;react-router 的语法智能提示。</p><h4 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript(ES6) code snippets"></a>JavaScript(ES6) code snippets</h4><p>ES6 语法智能提示，支持快速输入。</p><h4 id="javascript-console-utils：快速打印-log-日志【荐】"><a href="#javascript-console-utils：快速打印-log-日志【荐】" class="headerlink" title="javascript console utils：快速打印 log 日志【荐】"></a>javascript console utils：快速打印 log 日志【荐】</h4><p>安装这个插件后，当我们按住快捷键「Cmd + Shift + L」后，即可自动出现日志 <code>console.log()</code>。简直是日志党福音。</p><p>当我们选中某个变量 <code>name</code>，然后按住快捷键「Cmd + Shift + L」，即可自动出现这个变量的日志 <code>console.log(name)</code>。</p><p>其他的同类插件还有：Turbo Console Log。</p><p>不过，生产环境的代码，还是尽量少打日志比较好，避免出现一些异常。</p><p>编程有三等境界：</p><ul><li><p>第三等境界是打日志，这是最简单、便捷的方式，略显低级，一般新手或资深程序员偷懒时会用。</p></li><li><p>第二等境界是断点调试，在前端、Java、PHP、iOS 开发时非常常用，通过断点调试可以很直观地跟踪代码执行逻辑、调用栈、变量等，是非常实用的技巧。</p></li><li><p>第一等境界是测试驱动开发，在写代码之前先写测试。与第二等的断点调试刚好相反，大部分人不是很习惯这种方式，但在国外开发者或者敏捷爱好者看来，这是最高效的开发方式，在保证代码质量、重构等方面非常有帮助，是现代编程开发必不可少的一部分。</p></li></ul><h4 id="Code-Spell-Checker：单词拼写错误检查"><a href="#Code-Spell-Checker：单词拼写错误检查" class="headerlink" title="Code Spell Checker：单词拼写错误检查"></a>Code Spell Checker：单词拼写错误检查</h4><p>这个拼写检查程序的目标是帮助捕获常见的单词拼写错误，可以检测驼峰命名。从此告别 Chinglish.</p><h4 id="Auto-Close-Tag、Auto-Rename-Tag"><a href="#Auto-Close-Tag、Auto-Rename-Tag" class="headerlink" title="Auto Close Tag、Auto Rename Tag"></a>Auto Close Tag、Auto Rename Tag</h4><p>自动闭合配对的标签、自动重命名配对的标签。</p><h3 id="4、代码显示增强插件"><a href="#4、代码显示增强插件" class="headerlink" title="4、代码显示增强插件"></a>4、代码显示增强插件</h3><h4 id="Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】"><a href="#Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】" class="headerlink" title="Bracket Pair Colorizer 2：突出显示成对的括号【荐】"></a>Bracket Pair Colorizer 2：突出显示成对的括号【荐】</h4><p><code>Bracket Pair Colorizer 2</code>插件：以不同颜色显示成对的括号，并用连线标注括号范围。简称<strong>彩虹括号</strong>。</p><p>另外，还有个<code>Rainbow Brackets</code>插件，也可以突出显示成对的括号。</p><h4 id="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"><a href="#highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】" class="headerlink" title="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"></a>highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】</h4><p>VSCode 自带的高亮显示，实在是不够显眼。用插件支持一下吧。</p><p>所用了这个插件之后，VS Code 自带的高亮就可以关掉了：</p><p>在用户设置里添加<code>&quot;editor.selectionHighlight&quot;: false</code>即可。</p><p>参考链接：<a href="https://blog.csdn.net/palmer_kai/article/details/79548164">vscode 选中后相同内容高亮插件推荐</a></p><h4 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h4><p>vscode-icons 会根据文件的后缀名来显示不同的图标，让你更直观地知道每种文件是什么类型的。</p><h4 id="indent-rainbow：突出显示代码缩进"><a href="#indent-rainbow：突出显示代码缩进" class="headerlink" title="indent-rainbow：突出显示代码缩进"></a>indent-rainbow：突出显示代码缩进</h4><p><code>indent-rainbow</code>插件：突出显示代码缩进。</p><p>安装完成后，效果如下图所示：</p><p><img src="http://img.smyhvae.com/20190418_1958.png"></p><h4 id="TODO-Highlight"><a href="#TODO-Highlight" class="headerlink" title="TODO Highlight"></a>TODO Highlight</h4><p>写代码过程中，突然发现一个 Bug，但是又不想停下来手中的活，以免打断思路，怎么办？按照代码规范，我们一般是在代码中加个 TODO 注释。比如：（注意，一定要写成大写<code>TODO</code>，而不是小写的<code>todo</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//TODO:这里有个bug，我一会儿再收拾你</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//FIXME:我也不知道为啥， but it works only that way.</span><br></pre></td></tr></table></figure><p>安装了插件 <code>TODO Highlight</code>之后，按住「Cmd + Shift + P」打开命令面板，输入「Todohighlist」，选择相关的命令，我们就可以看到一个 todoList 的清单。</p><h4 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a>Better Comments</h4><p>为注释添加更醒目、带分类的色彩。</p><h3 id="5、代码格式化插件"><a href="#5、代码格式化插件" class="headerlink" title="5、代码格式化插件"></a>5、代码格式化插件</h3><h4 id="Prettier：代码格式化"><a href="#Prettier：代码格式化" class="headerlink" title="Prettier：代码格式化"></a>Prettier：代码格式化</h4><p>Prettier 是一个代码格式化工具，<strong>只关注格式化，但不具备校验功能</strong>。在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高，代码的展示也会更加美观。</p><p>步骤如下：</p><p>（1）安装插件 <code>Prettier</code>。</p><p>（2）在项目的根路径下，新建文件<code>.prettierrc</code>，并在文件中添加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">150</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insertSpaceBeforeFunctionParenthesis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面的内容，是我自己的配置，你可以参考。更多配置，可见官方文档：<a href="https://prettier.io/docs/en/options.html">https://prettier.io/docs/en/options.html</a></p><p>（3）Mac用户按快捷键「Option + Shift + F」，Win 用户按快捷键「Alt + shift + F」，即可完成代码的格式化。如果你的VS Code 设置的是自动格式化代码，那么这一步可以忽略。</p><h4 id="ESLint：代码格式的校验"><a href="#ESLint：代码格式的校验" class="headerlink" title="ESLint：代码格式的校验"></a>ESLint：代码格式的校验</h4><p>日常开发中，建议用 Prettier 做<strong>代码格式化</strong>，然后用 eslint 做<strong>格式校验</strong>。很多人把这两个插件的功能弄混了。</p><p>一般做法是：格式化建议是由程序员手动触发，格式校验由系统强制校验。通过 Prettier <strong>手动</strong>触发格式化，是为了让用户有感知；通过eslint 做<strong>强制</strong>校验之后，如果代码的格式不符合要求，系统就禁止你提交代码。</p><h4 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h4><p>代码格式化工具。</p><p>备注：相比之下，Prettier 是当前最流行的代码格式化工具，比 Beautify 用得更多。</p><h4 id="Paste-JSON-as-Code"><a href="#Paste-JSON-as-Code" class="headerlink" title="Paste JSON as Code"></a>Paste JSON as Code</h4><p>此插件可以将剪贴板中的 JSON 字符串转换成工作代码。支持多种语言。</p><h4 id="JS-CSS-HTML-Formatter【荐】"><a href="#JS-CSS-HTML-Formatter【荐】" class="headerlink" title="JS-CSS-HTML Formatter【荐】"></a>JS-CSS-HTML Formatter【荐】</h4><p>保存文件时，自动格式化 HTML、CSS、JS代码。</p><h3 id="6、图片相关插件"><a href="#6、图片相关插件" class="headerlink" title="6、图片相关插件"></a>6、图片相关插件</h3><h4 id="Polacode-2020：生成代码截图-【荐】"><a href="#Polacode-2020：生成代码截图-【荐】" class="headerlink" title="Polacode-2020：生成代码截图 【荐】"></a>Polacode-2020：生成代码截图 【荐】</h4><p>可以把代码片段保存成美观的图片，主题不同，代码的配色方案也不同，也也可以自定义设置图片的边框颜色、大小、阴影。</p><p>尤其是在我们做 PPT 分享时需要用到代码片段时，或者需要在网络上优雅地分享代码片段时，这一招很有用。</p><p>生成的效果如下：</p><p><img src="http://img.smyhvae.com/20200619_1403.png"></p><p>其他同类插件：<code>CodeSnap</code>。我们也可以通过 <a href="https://carbon.now.sh/">https://carbon.now.sh/</a>这个网站生成代码图片</p><p>有人可能会说：直接用 QQ 截图不行吗？可以是可以，但不够美观、不够干净。</p><h4 id="Image-Preview-【荐】"><a href="#Image-Preview-【荐】" class="headerlink" title="Image Preview 【荐】"></a>Image Preview 【荐】</h4><p>图片预览。鼠标移动到图片 url 上的时候，会自动显示图片的预览和图片尺寸。</p><h3 id="7、CSS相关插件"><a href="#7、CSS相关插件" class="headerlink" title="7、CSS相关插件"></a>7、CSS相关插件</h3><h4 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a>CSS Peek</h4><p>增强 HTML 和 CSS 之间的关联，快速查看该元素上的 CSS 样式。</p><h4 id="Vue-CSS-Peek"><a href="#Vue-CSS-Peek" class="headerlink" title="Vue CSS Peek"></a>Vue CSS Peek</h4><p>CSS Peek 对 Vue 没有支持，该插件提供了对 Vue 文件的支持。</p><h4 id="Color-Info"><a href="#Color-Info" class="headerlink" title="Color Info"></a>Color Info</h4><p>这个便捷的插件，将为你提供你在 CSS 中使用颜色的相关信息。你只需在颜色上悬停光标，就可以预览色块中色彩模型的（HEX、 RGB、HSL 和 CMYK）相关信息了。</p><h3 id="8、Mardown-相关插件"><a href="#8、Mardown-相关插件" class="headerlink" title="8、Mardown 相关插件"></a>8、Mardown 相关插件</h3><h4 id="Markdown-Preview-Github-Styling-【荐】"><a href="#Markdown-Preview-Github-Styling-【荐】" class="headerlink" title="Markdown Preview Github Styling 【荐】"></a>Markdown Preview Github Styling 【荐】</h4><p>以 GitHub 风格预览 Markdown 样式，十分简洁优雅。就像下面这样，左侧书写 Markdown 文本，右侧预览 Markdown 的渲染效果：</p><p><img src="http://img.smyhvae.com/20200618_2025.png"></p><h4 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h4><p>预览 Markdown 样式。</p><h4 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h4><p>这个插件将帮助你更高效地在 Markdown 中编写文档。</p><h3 id="9、通用工具类插件"><a href="#9、通用工具类插件" class="headerlink" title="9、通用工具类插件"></a>9、通用工具类插件</h3><h4 id="sftp：文件传输-【荐】"><a href="#sftp：文件传输-【荐】" class="headerlink" title="sftp：文件传输 【荐】"></a>sftp：文件传输 【荐】</h4><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><p>详细配置已经在上面讲过。</p><h4 id="Live-Server-【荐】"><a href="#Live-Server-【荐】" class="headerlink" title="Live Server 【荐】"></a>Live Server 【荐】</h4><p>在本地启动一个服务器，代码写完后可以实现「热更新」，实时地在网页中看到运行效果。就不需要每次都得手动刷新页面了。</p><p>使用方式：安装插件后，开始写代码；代码写完后，右键选择「Open with Live Server」。</p><h4 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h4><p>安装<code>open in browser</code>插件后，在 HTML 文件中「右键选择 –&gt; Open in Default Browser」，即可在浏览器中预览网页。</p><h4 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h4><p>工作中，我们经常会来回切换多个项目，每次都要找到对应项目的目录再打开，比较麻烦。Project Manager 插件可以解决这样的烦恼，它提供了专门的视图来展示你的项目，我们可以把常用的项目保存在这里，需要时一键切换，十分方便。</p><h4 id="WakaTime-【荐】"><a href="#WakaTime-【荐】" class="headerlink" title="WakaTime 【荐】"></a>WakaTime 【荐】</h4><p>统计在 VS Code 里写代码的时间。统计效果如下：</p><p><img src="http://img.smyhvae.com/20200618_2300.png"></p><h4 id="Code-Time"><a href="#Code-Time" class="headerlink" title="Code Time"></a>Code Time</h4><p><code>Code Time</code>插件：记录编程时间，统计代码行数。</p><p>安装该插件后，VS Code 底部的状态栏右下角可以看到时间统计。点击那个位置之后，选择「Code Time Dashboard」，即可查看统计结果。</p><p>备注：团长试了一下这个 code time 插件，发现统计结果不是很准。</p><h4 id="File-Tree-to-Text-Generator：快速生成文件的目录树"><a href="#File-Tree-to-Text-Generator：快速生成文件的目录树" class="headerlink" title="File Tree to Text Generator：快速生成文件的目录树"></a>File Tree to Text Generator：快速生成文件的目录树</h4><p>如题。</p><h4 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h4><ul><li><p>地址：<a href="https://github.com/shanalikhan/code-settings-sync">https://github.com/shanalikhan/code-settings-sync</a></p></li><li><p>作用：多台设备之间，同步 VS Code 配置。通过登录 GitHub 账号来使用这个同步工具。</p></li></ul><p>同步的详细操作，下一段会讲。</p><p>另外，北京时间的<a href="https://zhuanlan.zhihu.com/p/184868336">2020年8月14日</a>，微软发布 Visual Studio Code 1.48 稳定版。此版本<strong>原生</strong>支持用户同步 VS Code的配置，只需要登录微软账号或者 GitHub账号即可。</p><h4 id="vscode-syncing"><a href="#vscode-syncing" class="headerlink" title="vscode-syncing"></a>vscode-syncing</h4><ul><li><p>地址：<a href="https://github.com/nonoroazoro/vscode-syncing">https://github.com/nonoroazoro/vscode-syncing</a></p></li><li><p>作用：多台设备之间，同步 VS Code 配置。</p></li></ul><h4 id="minapp：小程序支持"><a href="#minapp：小程序支持" class="headerlink" title="minapp：小程序支持"></a>minapp：小程序支持</h4><p>小程序开发必备插件。</p><h4 id="Search-node-modules"><a href="#Search-node-modules" class="headerlink" title="Search node_modules"></a>Search node_modules</h4><p><code>node_modules</code>模块里面的文件夹和模块实在是太多了，根本不好找。好在安装 <code>Search node_modules</code> 这个插件后，输入快捷键「Cmd + Shift + P」，然后输入 <code>node_modules</code>，在弹出的选项中选择 <code>Search node_modules</code>，即可搜索 node_modules 里的模块。</p><p><img src="http://img.smyhvae.com/20200618_2100.png"></p><h4 id="RemoteHub"><a href="#RemoteHub" class="headerlink" title="RemoteHub"></a>RemoteHub</h4><p>不要惊讶，RemoteHub 和 GitLens 是同一个作者开发出来的。</p><p><code>RemoteHub</code>插件的作用是：可以在本地查看 GitHub 网站上的代码，而不需要将代码下载到本地。</p><p><img src="http://img.smyhvae.com/20190418_1937.png"></p><p>这个插件目前使用的人还不多，赶紧安装起来尝尝鲜吧。</p><h4 id="Live-Share：实时编码分享"><a href="#Live-Share：实时编码分享" class="headerlink" title="Live Share：实时编码分享"></a>Live Share：实时编码分享</h4><p><code>Live Share</code>这个神奇的插件是由微软官方出品，它的作用是：<strong>实时编码分享</strong>。也就是说，它可以实现你和你的同伴一起写代码。这绝对就是<strong>结对编程</strong>的神器啊。</p><p>安装方式：</p><p>打开插件管理，搜索“live share”，安装。安装后重启 VS Code，在左侧会多出一个按钮：</p><p><img src="http://img.smyhvae.com/20190418_2012.png"></p><p>上图中，点击红框部分，登录后就可以分享你的工作空间了。</p><p><img src="http://img.smyhvae.com/20190418_2005.png"></p><h4 id="Import-Cost"><a href="#Import-Cost" class="headerlink" title="Import Cost"></a>Import Cost</h4><p>在项目开发过程中，我们会引入很多 npm 包，有时候可能只用到了某个包里的一个方法，却引入了整个包，导致代码体积增大很多。<code>Import Cost</code>插件可以在代码中友好的提示我们，当前引入的包会增加多少体积，这很有助于帮我们优化代码的体积。</p><h3 id="10、主题插件"><a href="#10、主题插件" class="headerlink" title="10、主题插件"></a>10、主题插件</h3><p>给你的 VS Code 换个皮肤吧，免费的那种。</p><ul><li><p>Dracula Theme</p></li><li><p>Material Theme</p></li><li><p>Nebula Theme</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a></p></li><li><p>One Monokai Theme</p></li><li><p>Monokai Pro</p></li><li><p>Ayu</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten">Snazzy Plus</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode">Dainty</a></p></li><li><p><code>SynthWave &#39;84</code></p></li><li><p>GitHub Plus Theme：白色主题</p></li><li><p>Horizon Theme：红色主题</p></li></ul><h2 id="七、无缝切换：VS-Code-配置云同步"><a href="#七、无缝切换：VS-Code-配置云同步" class="headerlink" title="七、无缝切换：VS Code 配置云同步"></a>七、无缝切换：VS Code 配置云同步</h2><p>我们可以将配置云同步，这样的话，当我们换个电脑时，即可将配置一键同步到本地，就不需要重新安装插件了，也不需要重新配置软件。</p><p>下面讲的两个同步方法，都可以，看你自己需要。方法1是 VS Code自带的同步功能，操作简单。方法2 需要安装插件，支持更多的自定义配置。</p><h3 id="方法1：使用-VS-Code-自带的同步功能"><a href="#方法1：使用-VS-Code-自带的同步功能" class="headerlink" title="方法1：使用 VS Code 自带的同步功能"></a>方法1：使用 VS Code 自带的同步功能</h3><p>1、<strong>配置同步</strong>：</p><p>（1）在菜单栏选择「 Code –&gt; 首选项 –&gt; 打开设置同步」：</p><p><img src="https://img.smyhvae.com/20211008_1713.png"></p><p>（2）选择需要同步的配置：</p><p><img src="http://img.smyhvae.com/20211008_1716.png"></p><p>（3）通过Microsoft或者GitHub账号登录。 上图中，点击“登录并打开”，然后弹出如下界面：</p><p><img src="http://img.smyhvae.com/20211008_1717.png"></p><p>上图中，使用  微软账号或者 GitHub账号登录：</p><p><img src="https://img.smyhvae.com/20211008_1718.png"></p><p>（4）同步完成后，菜单栏会显示“首先项同步已打开”，最左侧也会多出一个同步图标，如下图所示：</p><p><img src="https://img.smyhvae.com/20211008_1720.png"></p><p>2、<strong>管理同步</strong>：</p><p>（1）点击菜单栏「Code –&gt; 首选项 –&gt; 设置同步已打开」，会弹出如下界面，进行相应的同步管理即可：</p><p><img src="https://img.smyhvae.com/20211008_1736.png"></p><p>（2）换另外一个电脑时，登录相同的账号，即可完成同步。</p><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/baidu_33340703/article/details/106967884">VS Code原生的配置同步功能——Settings Sync</a></li></ul><h3 id="方法2：使用插件-settings-sync"><a href="#方法2：使用插件-settings-sync" class="headerlink" title="方法2：使用插件 settings-sync"></a>方法2：使用插件 <code>settings-sync</code></h3><p>使用方法2，我们还可以把配置分享其他用户，也可以把其他用户的配置给自己用。</p><p>1、<strong>配置同步</strong>：（将自己本地的配置云同步到 GitHub）</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录后在 vscode 的界面中，可以选择一个别人的 gist；也可以忽略掉，然后创建一个属于自己的 gist。</p><p>（4）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「更新&#x2F;上传配置」，这样就可以把最新的配置上传到 GitHub。</p><p>2、<strong>管理同步</strong>：（换另外一个电脑时，从云端同步配置到本地）</p><p>（1）当我们换另外一台电脑时，可以先在 VS Code 中安装 <code>settings-sync</code> 插件。</p><p>（2）安装完插件后，在插件里使用 GitHub 账号登录。</p><p>（3）登录之后，插件的界面上，会自动出现之前的同步记录：</p><p><img src="http://img.smyhvae.com/20200521_1530.png"></p><p>上图中，我们点击最新的那条记录，就可将云端的最新配置同步到本地：</p><p><img src="http://img.smyhvae.com/20200521_1550.png"></p><p>如果你远程的配置没有成功同步到本地，那可能是网络的问题，此时，可以使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」，多试几次。</p><p><strong>使用其他人的配置</strong>：</p><p>如果我们想使用别人的配置，首先需要对方提供给你 gist。具体步骤如下：</p><p>（1）安装插件 <code>settings-sync</code>。</p><p>（2）使用快捷键 「Command + Shift + P」，在弹出的命令框中输入 sync，并选择「下载配置」</p><p>（3）在弹出的界面中，选择「Download Public Gist」，然后输入别人分享给你的 gist。注意，这一步不需要登录 GitHub 账号。</p><h2 id="最后一段"><a href="#最后一段" class="headerlink" title="最后一段"></a>最后一段</h2><p>如果你还有什么推荐的 VS Code 插件，欢迎留言。</p><p>大家完全不用担心这篇文章会过时，随着 VS Code 的版本更新和插件更新，本文也会随之更新。关于 VS Code 内容的后续更新，你可以关注我在 GitHub 上的前端入门项目，项目地址是：</p><blockquote><p><a href="https://github.com/qianguyihao/Web">https://github.com/qianguyihao/Web</a></p></blockquote><p>一个超级详细和真诚的前端入门项目。</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li><a href="https://github.com/qianguyihao/Web/issues/84">issues 84</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><h3 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h3><ul><li>中文版 Awesome VS Code：<a href="https://github.com/formulahendry/awesome-vscode-cn">https://github.com/formulahendry/awesome-vscode-cn</a></li></ul><h3 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h3><ul><li><p><a href="https://juejin.im/post/5ea40c6751882573b219777d">VSCode 插件大全｜ VSCode 高级玩家之第二篇</a></p></li><li><p><a href="http://www.supuwoerc.xyz/tools/vscode/plugins.html">http://www.supuwoerc.xyz/tools/vscode/plugins.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/99462672">如何让 VS Code 更好用 10 倍？这里有一份 VS Code 新手指南</a></p></li><li><p><a href="https://lyreal666.com/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%80%83%E8%99%91%E5%8D%B8%E8%BD%BD%E7%9A%84-VSCode-%E6%89%A9%E5%B1%95/#more">那些你应该考虑卸载的 VSCode 扩展</a></p></li><li><p><a href="https://juejin.im/post/5d74eb5c51882525017787d9">VS Code 折腾记 - (16) 推荐一波实用的插件集</a></p></li><li><p><a href="https://juejin.im/post/5db66672f265da4d0e009aad">VSCode 前端必备插件，有可能你装了却不知道如何使用？</a></p></li><li><p><a href="https://juejin.im/post/5a08d1d6f265da430f31950e">能让你开发效率翻倍的 VSCode 插件配置（上）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000012811886">https://segmentfault.com/a/1190000012811886</a></p></li><li><p><a href="https://idoubi.cc/2019/07/08/vscode-sublime-theme/">「Vscode」打造类 sublime 的高颜值编辑器</a></p></li><li><p><a href="https://lsqy.tech/2020/03/14/20200314Mac-Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/">Mac Vscode 快捷键</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1591581536&ver=2387&signature=i4xLZlLe1Gkl7OiBIhPO*VSeNB5lzFgTY-dgNW9E9ZbtIAv4bnJ1RdAAZdhvDw*cg-DmMcUa-V8NSUdV-tthmXZCq3ht4edCweq6v0QxKjnh8IuAxyyh5qymdRui*8iE&new=1">使用 VSCode 的一些技巧</a></p></li></ul><hr><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="WebStorm的简单设置"><a href="#WebStorm的简单设置" class="headerlink" title="WebStorm的简单设置"></a>WebStorm的简单设置</h2><h4 id="1、主题修改："><a href="#1、主题修改：" class="headerlink" title="1、主题修改："></a>1、主题修改：</h4><p>可能大家会觉得软件的界面不太好看，我们可以换一下主题。选择菜单栏“File–settings–appearance–theme”，主题选择 Dracula：</p><p><img src="http://img.smyhvae.com/20180118_1600.png"></p><h4 id="2、导入第三方主题："><a href="#2、导入第三方主题：" class="headerlink" title="2、导入第三方主题："></a>2、导入第三方主题：</h4><p>系统提供的两种主题可能都不太好看，我们可以进入网站<a href="http://color-themes.com/">http://color-themes.com/</a>来获取第三方主题，这里推荐两个主题，大家二选一即可：</p><ul><li><p><a href="https://github.com/y3sh/Intellij-Colors-Sublime-Monokai">Sublime</a></p></li><li><p><a href="https://github.com/ChrisRM/material-theme-jetbrains">Material</a></p></li></ul><p><img src="http://img.smyhvae.com/20180118_1636.png"></p><p><img src="http://img.smyhvae.com/20180118_1637.png"></p><p>上图中，在网站<a href="http://color-themes.com/">http://color-themes.com/</a>中将主题下载之后，是一个jar包。那怎么导入到WebStorm呢？</p><p>别着急，回到WebStorm，选择菜单栏“ File-Import Settings”，将下载好的jar包导入即可。</p><h4 id="3、代码字体修改："><a href="#3、代码字体修改：" class="headerlink" title="3、代码字体修改："></a>3、代码字体修改：</h4><p>选择菜单栏“File–settings–Editor–Font”：</p><p><img src="http://img.smyhvae.com/20180118_1627.png"></p><p>上图中，点击红框部分，然后弹出如下界面：</p><p><img src="http://img.smyhvae.com/20180118_1628.png"></p><p>我们在上图中修改代码的字体。</p><p>修改完之后发现 WebStorm 的一些默认字体（比如侧边栏的工程目录的字体）并没有发生变化，如果想改的话，也可以改（我个人一般是不改的）。</p><h4 id="4、关闭更新："><a href="#4、关闭更新：" class="headerlink" title="4、关闭更新："></a>4、关闭更新：</h4><p>如下图所示：</p><p><img src="http://img.smyhvae.com/20180118_1646.png"></p><h4 id="5、快捷键习惯的修改："><a href="#5、快捷键习惯的修改：" class="headerlink" title="5、快捷键习惯的修改："></a>5、快捷键习惯的修改：</h4><h4 id="7、配置代码的自动提示："><a href="#7、配置代码的自动提示：" class="headerlink" title="7、配置代码的自动提示："></a>7、配置代码的自动提示：</h4><h4 id="14、修改文件编码为UTF-8："><a href="#14、修改文件编码为UTF-8：" class="headerlink" title="14、修改文件编码为UTF-8："></a>14、修改文件编码为UTF-8：</h4><p>WebStorm 2017.3.3版本的默认编码方式是 GBK，我们还是统一设置为UTF-8吧，不要坑队友哦：</p><p><img src="http://img.smyhvae.com/20180124_1856.png"></p><h3 id="新建一个空的项目"><a href="#新建一个空的项目" class="headerlink" title="新建一个空的项目"></a>新建一个空的项目</h3><p>配置完成后，可以开始新建一个项目文件夹（站点），项目通常包含如下内容：</p><ul><li><p>首页：index.html</p></li><li><p>样式：css文件夹</p><ul><li>index.css</li><li>相同样式：全局样式、公共样式。起名为：base.css（基本样式）或者 global.css (全局样式)</li></ul></li><li><p>图片：images文件夹、文件</p></li><li><p>特效：js文件夹、js文件</p></li></ul><p><strong>步骤如下：</strong></p><p>（1）新建一个空的项目：<br><img src="http://img.smyhvae.com/20180118_1720.png"></p><p>（2）然后新建一个html文件：</p><p><img src="http://img.smyhvae.com/20180118_1602.png"></p><p>（3）新建一个空的文件夹，命名为<code>css</code>：</p><p><img src="http://img.smyhvae.com/20180118_1725.png"></p><p>然后在这个css文件夹中，新建样式表：（比如index.css\base.css）</p><p><img src="http://img.smyhvae.com/20180118_1730.png"></p><p>（4）最后新建一个images文件夹，用于存放土片。这样的话，一个基本的项目结构就搭建好了：</p><p><img src="http://img.smyhvae.com/20180118_1733.png"></p><p>接下来，开始运用起你们的前端知识吧。</p><p>（5）如果要新建JS文件的话，操作如下：</p><p><img src="http://img.smyhvae.com/20180124_1859.png"></p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h4 id="多光标编辑"><a href="#多光标编辑" class="headerlink" title="多光标编辑"></a>多光标编辑</h4><p>我们可以按住鼠标不松手，选中多个光标，然后同时编辑：</p><h4 id="随时在浏览器中看代码效果"><a href="#随时在浏览器中看代码效果" class="headerlink" title="随时在浏览器中看代码效果"></a>随时在浏览器中看代码效果</h4><p>20180118_1658.png</p><p>如上图所示，我们可以点击右上角的浏览器图标，在各个浏览器中看效果。</p><h4 id="实时查看颜色"><a href="#实时查看颜色" class="headerlink" title="实时查看颜色"></a>实时查看颜色</h4><p>写代码时如果想输入颜色，会自动提示颜色的预览。</p><p><img src="http://img.smyhvae.com/20180118_1702.png"></p><p>点击最左侧的颜色预览，还能弹出调色板：</p><p><img src="http://img.smyhvae.com/20180118_1710.gif"></p><h2 id="代码的自动补齐"><a href="#代码的自动补齐" class="headerlink" title="代码的自动补齐"></a>代码的自动补齐</h2><p>（1）在html文档中，输入<code>div*10</code>，按tab键后，弹出的效果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在html文档中，输入如下部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.search-logo+.search-input+.search-car+.search-moreA</span><br></pre></td></tr></table></figure><p>按tab键后，弹出的效果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-moreA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你看，京东的搜索框就包含了这几个div：</p><p>20180122_1045.png</p><p>（3）方法的注释：</p><p>方法写完之后（注意，一定要先写完整），我们在方法的前面输入<code>/**</code>，然后回车，会发现，注释的格式会自动补齐。</p><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：给定元素查找他的第一个元素子节点，并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">ele</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Element|*|Node</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFirstNode</span>(<span class="params">ele</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> node = ele.<span class="property">firstElementChild</span> || ele.<span class="property">firstChild</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h4 id="标签环绕"><a href="#标签环绕" class="headerlink" title="标签环绕"></a>标签环绕</h4><p>输入一段字符后，按住<code>Ctrl + Alt + T</code>，可以用标签将这段字符环绕：</p><p><img src="http://img.smyhvae.com/20180118_1719.gif"></p><h4 id="选中正行中的文本"><a href="#选中正行中的文本" class="headerlink" title="选中正行中的文本"></a>选中正行中的文本</h4><p>比如下面这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text-align: center;  /*让 li 里面的文本水平方向居中*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果直接按 【ctrl+C】的话，复制的是整行的内容，把前面的空格也包含进去了。如果不想复制空格，有另外一个办法：将光标放在行尾，然后按住【shift+home】，就能选中你想要的内容了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><p><strong>自动保存</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;files.autoSave&quot;: &quot;onFocusChange&quot;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/WestLonly/article/details/78048049">https://blog.csdn.net/WestLonly/article/details/78048049</a></p><p><strong>在新的窗口中打开文件</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><h3 id="如何查看代码结构"><a href="#如何查看代码结构" class="headerlink" title="如何查看代码结构"></a>如何查看代码结构</h3><ul><li><p>方法一：「Cmd + Shift + O」</p></li><li><p>方法二：安装插件<code>Code Outline</code></p></li></ul><p>参考链接：<a href="https://www.zhihu.com/question/264045094">https://www.zhihu.com/question/264045094</a></p><h3 id="在本地开启服务器"><a href="#在本地开启服务器" class="headerlink" title="在本地开启服务器"></a>在本地开启服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g live-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">live-server</span><br></pre></td></tr></table></figure><p>参考链接：<a href="http://www.cnblogs.com/1zhk/p/5699379.html">Visual Studio Code + live-server编辑和浏览HTML网页</a></p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p>方式一：打开VS Code，左侧有五个按钮，点击最下方的按钮，然后就可以开始安装相应的插件了。</p><p>方式二：在vscode中输入快捷键「ctrl+shift+P」，弹出指令窗口，输入<code>extension:install</code>，回车，左侧即打开扩展安装的界面。</p><h3 id="sftp：文件传输"><a href="#sftp：文件传输" class="headerlink" title="sftp：文件传输"></a>sftp：文件传输</h3><p>输入快捷键「ctrl+shift+P」，弹出指令窗口，输入<code>sftp:config</code>，回车，当前工作工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的是：</p><ul><li><p><code>host</code>：服务器的IP地址</p></li><li><p><code>username</code>：工作站自己的用户名</p></li><li><p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是ppk文件）</p></li><li><p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用sftp上传文件之前，要手动在工作站上mkdir生成这个根目录</p></li><li><p><code>ignore</code>：指定在使用sftp: sync to remote的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p></li></ul><p>举例如下：(注意，其中的注释不能保留)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>     <span class="comment">//服务器ip</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span>     <span class="comment">//端口，sftp模式是22</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//用户名</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//密码</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sftp&quot;</span><span class="punctuation">,</span> <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">&quot;agent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;privateKeyPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;passphrase&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;passive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interactiveAuth&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/root/node/build/&quot;</span><span class="punctuation">,</span>  <span class="comment">//服务器上的文件地址</span></span><br><span class="line">    <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./server/build&quot;</span><span class="punctuation">,</span>        <span class="comment">//本地的文件地址</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;uploadOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>   <span class="comment">//监听保存并上传</span></span><br><span class="line">    <span class="attr">&quot;syncMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;update&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;watcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="comment">//监听外部文件</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>     <span class="comment">//外部文件的绝对路径</span></span><br><span class="line">        <span class="attr">&quot;autoUpload&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>             <span class="comment">//忽略项</span></span><br><span class="line">        <span class="string">&quot;**/.vscode/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;**/.git/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;**/.DS_Store&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Sass-Formatter"><a href="#Sass-Formatter" class="headerlink" title="Sass Formatter"></a>Sass Formatter</h3><p>Sass 文件格式化。</p><h3 id="Code-Outline：显示代码结构"><a href="#Code-Outline：显示代码结构" class="headerlink" title="Code Outline：显示代码结构"></a>Code Outline：显示代码结构</h3><p>安装好插件「Code Outline」后，可以在左侧的资源管理器中，显示当前文件的代码结构：</p><p><img src="http://img.smyhvae.com/20180420_0925.png"></p><p>参考链接：</p><ul><li><p><a href="https://www.zhihu.com/question/50273450">https://www.zhihu.com/question/50273450</a></p></li><li><p><a href="http://itopic.org/vscode.html">http://itopic.org/vscode.html</a></p></li><li><p><a href="https://github.com/varHarrie/varharrie.github.io/issues/10">https://github.com/varHarrie/varharrie.github.io/issues/10</a></p></li></ul><h3 id="vscode-fileheader：添加顶部注释模板-签名"><a href="#vscode-fileheader：添加顶部注释模板-签名" class="headerlink" title="vscode-fileheader：添加顶部注释模板(签名)"></a>vscode-fileheader：添加顶部注释模板(签名)</h3><p>（1）安装插件vscode -fileheader，并重启。</p><p>（2）在首选项-》设置-》中搜索fileheader，找到头部模板修改。</p><p>默认的快捷键是：「Ctrl + option + I」。</p><p>参考链接：</p><ul><li><a href="https://www.zhihu.com/question/62385647">https://www.zhihu.com/question/62385647</a></li></ul><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p>在本地开启Node服务器：</p><p><img src="http://img.smyhvae.com/20180611_2230.png"></p><p>然后在浏览器的地址栏输入<code>http://localhost/</code> + 文件的相对路径，就可以通过服务器的形式打开这个文件。</p><h3 id="Copy-Relative-Path"><a href="#Copy-Relative-Path" class="headerlink" title="Copy Relative Path"></a>Copy Relative Path</h3><blockquote><p>这个插件很有用，使用频率很高。</p></blockquote><p>复制文件的相对路径：（相对于根路径而言）</p><p><img src="http://img.smyhvae.com/20180611_2235.png"></p><h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h3><p>在浏览器中打开。</p><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><p>适用于 JSX、Vue、HTML。在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签，帮你减少 50% 的击键。</p><p>###Project Manager</p><p>项目管理，让我们方便的在命令面板中切换项目文件夹，当然，你也可以直接打开包含多个项目的父级文件夹，但这样可能会让 VSCode 变慢。</p><h3 id="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"><a href="#highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】" class="headerlink" title="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"></a>highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】</h3><p>VSCode自带的高亮显示，实在是不够显眼。用插件支持一下吧。</p><p>所用了这个插件之后，VS Code自带的高亮就可以关掉了：</p><p>在用户设置里添加<code>&quot;editor.selectionHighlight&quot;: false</code>即可。</p><p>参考链接：<a href="https://blog.csdn.net/palmer_kai/article/details/79548164">vscode 选中后相同内容高亮插件推荐</a></p><h3 id="highlight-words：全局高亮（跨文件多色彩）"><a href="#highlight-words：全局高亮（跨文件多色彩）" class="headerlink" title="highlight-words：全局高亮（跨文件多色彩）"></a>highlight-words：全局高亮（跨文件多色彩）</h3><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/31163793">Visual Studio Code全局高亮着色插件(跨文件多色彩)经验纪要</a></p><h3 id="color-exchange：颜色格式转换【荐】"><a href="#color-exchange：颜色格式转换【荐】" class="headerlink" title="color-exchange：颜色格式转换【荐】"></a>color-exchange：颜色格式转换【荐】</h3><p>安装完插件后，在css中输入颜色，然后按<code>cmd + .</code>，就能进行颜色的格式转换。</p><p>20181013_1450.png</p><p>我在写这一段时，安装的人还不多，赶紧上车。</p><h2 id="Vue-相关的插件"><a href="#Vue-相关的插件" class="headerlink" title="Vue 相关的插件"></a>Vue 相关的插件</h2><h3 id="vetur：vue-文件的基本语法高亮"><a href="#vetur：vue-文件的基本语法高亮" class="headerlink" title="vetur：vue 文件的基本语法高亮"></a>vetur：vue 文件的基本语法高亮</h3><p>安装完 vetur 后还需要加上这样一段配置下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;emmet.syntaxProfiles&quot;: &#123;</span><br><span class="line">  &quot;vue-html&quot;: &quot;html&quot;,</span><br><span class="line">  &quot;vue&quot;: &quot;html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><p><a href="https://www.clarencep.com/2017/03/18/edit-vue-file-via-vscode/">https://www.clarencep.com/2017/03/18/edit-vue-file-via-vscode/</a></p></li><li><p><a href="https://github.com/varHarrie/varharrie.github.io/issues/10">https://github.com/varHarrie/varharrie.github.io/issues/10</a></p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="https://www.jianshu.com/p/0724921285d4">https://www.jianshu.com/p/0724921285d4</a></p></li><li><p><a href="https://www.cnblogs.com/AmosLee94/p/8338013.html">https://www.cnblogs.com/AmosLee94/p/8338013.html</a></p></li></ul><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th align="left">Win快捷键</th><th align="left">Mac快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Shift + Alt + F</td><td align="left">Shift + option + F</td><td align="left">代码格式化</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left"></td><td align="left">在当前行上面增加一行并跳至该行</td><td align="left"></td></tr><tr><td align="left"><strong>Ctrl + Shift + D</strong></td><td align="left"></td><td align="left">复制当前行到下一行</td><td align="left"></td></tr></tbody></table><h3 id="如何同时打开多个窗口"><a href="#如何同时打开多个窗口" class="headerlink" title="如何同时打开多个窗口"></a>如何同时打开多个窗口</h3><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>问题1</p><p>解决；You can kill the Microsoft.VSCode.Cpp.IntelliSense.Msvc process to save the file successfully. 也就是 IntelliSense 这个进程。</p><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/30976584">能让你开发效率翻倍的 VSCode 插件配置（上）</a></li></ul><h3 id="某网友的VS-Code-插件截图"><a href="#某网友的VS-Code-插件截图" class="headerlink" title="某网友的VS Code 插件截图"></a>某网友的VS Code 插件截图</h3><p><img src="http://img.smyhvae.com/20180611_2255.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h3 id="新建文件时快速生成Html"><a href="#新建文件时快速生成Html" class="headerlink" title="新建文件时快速生成Html"></a>新建文件时快速生成Html</h3><p><strong>安装如下插件：</strong></p><ul><li>FileHeader：自动创建文件开头模板，并且会根据最后的保存时间修改更新时间。<a href="https://github.com/shiyanhui/FileHeader">官网链接</a>。</li><li>CSS Format：css格式化。</li><li>Emmet：它能够让你在编辑器中书写CSS和HTML的缩写并且动态地拓展它，是一个能大幅度提高前端开发效率的一个工具。这个软件的安装过程比较久。<a href="http://docs.emmet.io/">官网教程</a>。</li></ul><p><strong>开始使用：</strong></p><p>新建文件，输入<code>html:5</code>，按[Ctrl + E] 或者 Tab 键，</p><p>参考链接：<a href="http://www.jianshu.com/p/f44e91bf9dfb">Sublime Text 新建文件快速生成Html【头部信息】和【代码补全】、【汉化】</a></p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="SublimeCodeIntel：JavaScript代码自动提示（不好用）"><a href="#SublimeCodeIntel：JavaScript代码自动提示（不好用）" class="headerlink" title="SublimeCodeIntel：JavaScript代码自动提示（不好用）"></a>SublimeCodeIntel：JavaScript代码自动提示（不好用）</h3><p>安装完成后，通过路径Perferences-&gt;Package Settings-&gt;SublimeCodeIntel-&gt;Setting - Defalut打开配置文件。</p><p>将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;codeintel_selected_catalogs&quot;: [&quot;jQuery&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;codeintel_selected_catalogs&quot;: [&quot;JavaScript&quot;]</span><br></pre></td></tr></table></figure><p>保存后重启软件。</p><p>参考链接：<a href="http://blog.csdn.net/hehexiaoxia/article/details/54134756">#</a></p><h3 id="javascript-complet：JavaScript代码自动提示"><a href="#javascript-complet：JavaScript代码自动提示" class="headerlink" title="javascript complet：JavaScript代码自动提示"></a>javascript complet：JavaScript代码自动提示</h3><ul><li><p><a href="https://packagecontrol.io/packages/JavaScript%20Completions">官网链接</a></p></li><li><p><a href="https://github.com/pichillilorenzo/JavaScript-Completions">GitHub链接</a></p></li></ul><p>在google上搜关键字”sublime javascript complete”找到的。另外还搜到一个<a href="https://github.com/alienhard/SublimeAllAutocomplete">SublimeAllAutocomp lete</a></p><h3 id="JsFormat：JS代码格式化"><a href="#JsFormat：JS代码格式化" class="headerlink" title="JsFormat：JS代码格式化"></a>JsFormat：JS代码格式化</h3><p>快捷键是：选中JS代码，然后按ctrl+alt+f。</p><p>或者，先用快捷键打开命令面板 “ctrl + shift + p”, 再输入 “Format: Javascript” 就可以使用格式化命令</p><h3 id="Sublime-Server"><a href="#Sublime-Server" class="headerlink" title="Sublime Server"></a>Sublime Server</h3><p>我们如果右键在浏览器中打开html网页，其实是以<strong>文件路径</strong>的方式打开的，导致很多api无法操作。最好的办法是：将html在服务器上打开。</p><p>我们如果安装 <code>Sublime Server</code>，就可以让网页在本地的服务器上打开。</p><p>安装成功之后，使用步骤如下：</p><p>（1）选择菜单栏”Tools –&gt; SublimeServer –&gt; Start SublimeServer”启动服务器。</p><p>（2）在html文档里，右键选择 “View in SublimeServer”。</p><p>如果想关闭服务器，直接把Sublime Text 整个软件关掉就好。其他的关闭方式容易导致软件卡死。</p><h2 id="代码快速生成"><a href="#代码快速生成" class="headerlink" title="代码快速生成"></a>代码快速生成</h2><p>（1）<code>&gt;</code>符号的技巧：</p><p>输入<code>ul&gt;li*9</code>，然后按tab键，生成的代码如下；（符号<code>&gt;</code>是包含的关系）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sublime-text-快捷键"><a href="#sublime-text-快捷键" class="headerlink" title="sublime text 快捷键"></a>sublime text 快捷键</h2><table><thead><tr><th align="left">Win快捷键</th><th align="left">Mac快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">html:5+tab</td><td align="left"></td><td align="left">html结构代码</td><td align="left"></td></tr><tr><td align="left">tab</td><td align="left"></td><td align="left">补全标签代码</td><td align="left"></td></tr><tr><td align="left">tab</td><td align="left">补全标签代码</td><td align="left"></td><td align="left">比如，在html文件中输入<code>div</code>，然后按住tab键后，会自动生成<code>&lt;div&gt;&lt;/div&gt;</code>。</td></tr><tr><td align="left"><strong>Ctrl + Shift + D</strong></td><td align="left">Cmd + Shift + D</td><td align="left">复制当前行到下一行</td><td align="left"></td></tr><tr><td align="left">Ctrl+Shift+K</td><td align="left"></td><td align="left">快速删除整行</td><td align="left"></td></tr><tr><td align="left">Ctrl+鼠标左键单击</td><td align="left"></td><td align="left">集体输入</td><td align="left"></td></tr><tr><td align="left">Ctrl+H</td><td align="left">Option+Cmd+F</td><td align="left">查找替换</td><td align="left"></td></tr><tr><td align="left">Ctrl+&#x2F;</td><td align="left"></td><td align="left">注释单行</td><td align="left"></td></tr><tr><td align="left">Ctrl+Shift+&#x2F;</td><td align="left"></td><td align="left">注释多行</td><td align="left"></td></tr><tr><td align="left">Ctrl+L</td><td align="left"></td><td align="left">快速选中整行，继续操作则继续选择下一行，效果和 <code>Shift + ↓</code> 效果一样</td><td align="left"></td></tr><tr><td align="left"><strong>Ctrl+Shift+L</strong></td><td align="left"></td><td align="left">先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行</td><td align="left">经常与上一个快捷键结合起来使用</td></tr><tr><td align="left"><strong>Ctrl + Shift +【↑&#x2F;↓</strong></td><td align="left">Ctrl + Cmd +↑&#x2F;↓</td><td align="left">移动当前行</td><td align="left"></td></tr><tr><td align="left">F11</td><td align="left"></td><td align="left">全屏</td><td align="left"></td></tr></tbody></table><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://github.com/smyhvae/tools/blob/master/01-%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/Sublime%20Text%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.md">Sublime Text使用技巧</a></li></ul><p>我自己整理的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://chinagdg.org/2015/12/%E5%83%8F-sublime-text-%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8-chrome-devtools/">像 Sublime Text 一样使用 Chrome DevTools</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://github.com/sirius1024/iterm2-with-oh-my-zsh">iTerm2 + Oh My Zsh 打造舒适终端体验</a></p></li><li><p><a href="https://blog.csdn.net/huangpin815/article/details/105606135">安装oh my zsh失败：curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</a></p></li><li><p><a href="https://www.jianshu.com/p/246b844f4449">https://www.jianshu.com/p/246b844f4449</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<p>iconMoon.md</p><ul><li><p><a href="https://www.cnblogs.com/chinabin1993/p/8185398.html">https://www.cnblogs.com/chinabin1993/p/8185398.html</a></p></li><li><p><a href="https://blog.csdn.net/web_harry/article/details/70310597">https://blog.csdn.net/web_harry/article/details/70310597</a></p></li><li><p><a href="https://blog.csdn.net/qq_37261367/article/details/80012320">https://blog.csdn.net/qq_37261367/article/details/80012320</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
